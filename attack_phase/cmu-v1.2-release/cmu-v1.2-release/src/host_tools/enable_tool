#!/usr/bin/python3 -u

# @file enable_tool
# @author Frederich Stine
# @brief host tool for enabling a feature on a fob
# @date 2023
#
# This source file is part of an example system for MITRE's 2023 Embedded
# CTF (eCTF). This code is being provided only for educational purposes for the
# 2023 MITRE eCTF competition, and may not meet MITRE standards for quality.
# Use this code at your own risk!
#
# @copyright Copyright (c) 2023 The MITRE Corporation

import socket
import argparse


# @brief Function to send commands to enable a feature on a fob
# @param fob_bridge, bridged serial connection to fob
# @param package_name, name of the package file to read from
def enable(fob_bridge, package_name):
    try:
        with open(f"/package_dir/{package_name}", "rb") as fhandle:
            package = fhandle.read()
    except FileNotFoundError:
        print('Failed to enable feature')
        return 0

    # Connect fob socket to serial
    fob_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    fob_sock.connect(("ectf-net", int(fob_bridge)))

    # Send enable command to fob
    fob_sock.send(b"e")

    # Open and read binary data from package file
    # Should be the exact package corresponding to the 
    # package name and encrypted with deployment public key

    # Send package encrypted with fob's public key to fob
    fob_sock.send(package)

    # Set timeout for if enable fails
    fob_sock.settimeout(5)

    # Try to receive data - if failed, enabling failed
    enable_success = b''
    try:
        while len(enable_success) != 7:
            enable_success += fob_sock.recv(7 - len(enable_success))
            enable_success = enable_success.replace(b"\x00",b"")

        if enable_success == b'Enabled':
            print('Successfully enabled feature')
            return 0
        else:
            print('Failed to enable feature')
            return 1
    except socket.timeout:
        print('Failed to enable feature')
        return 1

# @brief Main function
#
# Main function handles parsing arguments and passing them to program
# function.
def main():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "--fob-bridge", help="Bridge for the fob", type=int, required=True,
    )
    parser.add_argument(
        "--package-name", help="Name of the package file", type=str, required=True,
    )

    args = parser.parse_args()

    status = enable(args.fob_bridge, args.package_name)
    if status != 0:
        exit(status)


if __name__ == "__main__":
    main()
