#******************************************************************************
#
# makedefs - Definitions common to all makefiles.
#
# Copyright (c) 2005-2020 Texas Instruments Incorporated.  All rights reserved.
# Software License Agreement
# 
#   Redistribution and use in source and binary forms, with or without
#   modification, are permitted provided that the following conditions
#   are met:
# 
#   Redistributions of source code must retain the above copyright
#   notice, this list of conditions and the following disclaimer.
# 
#   Redistributions in binary form must reproduce the above copyright
#   notice, this list of conditions and the following disclaimer in the
#   documentation and/or other materials provided with the  
#   distribution.
# 
#   Neither the name of Texas Instruments Incorporated nor the names of
#   its contributors may be used to endorse or promote products derived
#   from this software without specific prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
# 
# This is part of revision 2.2.0.295 of the Tiva Firmware Development Package.
#
#******************************************************************************

# .PHONY: cmu_env_check 

# cmu_env_check:
# ifndef USING_CMU_BUILD_TOOLS
# 	$(error "You need to be using the CMU fork of the build tools!")
# endif

#******************************************************************************
#
# This makefile is used to build object files from source code
# for all of the source files used by both the car and the fob.
#
#******************************************************************************


#******************************************************************************
#
# Get the operating system name.  If this is Cygwin, the .d files will be
# munged to convert c: into /cygdrive/c so that "make" will be happy with the
# auto-generated dependencies.
#
#******************************************************************************
os:=${shell uname -s}

TARGET=armv7em-none-eabi

#
# Get the prefix for the tools to use.  Use arm-stellaris-eabi if it exists,
# otherwise fall back to arm-none-eabi.
#
PREFIX:=${shell type arm-stellaris-eabi-gcc > /dev/null 2>&1 && \
         echo arm-stellaris-eabi || echo arm-none-eabi}

LLVM_VERSION=13


#
# The command for calling the compiler.
#
CC=clang-${LLVM_VERSION}

#
# Set the compiler CPU/FPU options.
#
CPU=-mcpu=cortex-m4
FPU=-mfpu=fpv4-sp-d16 -mfloat-abi=hard

#
# The flags passed to the assembler.
#
AFLAGS=-mthumb \
       ${CPU}  \
	   ${FPU}  \
       -MD

#
# The flags passed to the compiler.
#
CFLAGS=-mthumb             \
       ${CPU}              \
	   ${FPU}              \
       -ffunction-sections \
       -fdata-sections     \
       -MD                 \
       -std=c99            \
       -Wall               \
       -pedantic           \
       -DPART_${PART}      \
       -c

#
# The command for calling the library archiver.
#
AR=llvm-ar-${LLVM_VERSION}

#
# The command for calling the linker.
#
LD=ld.lld-${LLVM_VERSION}

#
# The flags passed to the linker.
#
LDFLAGS=--gc-sections --check-sections --no-dynamic-linker 

#
# Get the location of libgcc.a from the GCC front-end.
#
LIBGCC:=${shell ${CC} ${CFLAGS} -print-libgcc-file-name}

#
# Get the location of libc.a from the GCC front-end.
#
LIBC:=${shell ${CC} ${CFLAGS} -print-file-name=libc.a}

#
# Get the location of libm.a from the GCC front-end.
#
LIBM:=${shell ${CC} ${CFLAGS} -print-file-name=libm.a}

#
# In order to use clang, we need a sysroot (i.e. an impl of the C standard library),
# and we need the intrinsics provided by libc libm and friends.
#
# Luckily, the gcc-arm-none-eabi builds and provides such resources for us.
# This is why we still need to install gcc.
#
ARM_GNU_CC=arm-none-eabi-gcc

# FIXME: This is actually broken.
# For some reason, gcc-arm-none-eabi is misconfigured,
# so the -print-sysroot option actually just prints nothing.
# Instead, we hardcode it to the default package location.
# Oof.

#ARM_CORTEXM_SYSROOT = \
#	$(shell $(ARM_GNU_CC) $(CFLAGS) -print-sysroot 2>&1)

ARM_CORTEXM_SYSROOT = /usr/lib/arm-none-eabi

ARM_CORTEXM_MULTI_DIR = \
  $(shell $(ARM_GNU_CC) $(CFLAGS) -print-multi-directory 2>&1)

ARM_CORTEXM_LIBGCC := $(dir $(shell $(ARM_GNU_CC) $(CFLAGS) -print-libgcc-file-name 2>&1))

EXTRA_CFLAGS += -target ${TARGET} -mthumb --sysroot=$(ARM_CORTEXM_SYSROOT) 

# TODO:
ARM_CORTEXM_BUILTINS=/home/libclang_rt.builtins-armv7em.a



LDFLAGS += \
	-L$(ARM_CORTEXM_SYSROOT)/lib/$(ARM_CORTEXM_MULTI_DIR) \
	-L$(ARM_CORTEXM_LIBGCC) \
	$(ARM_CORTEXM_BUILTINS) \
	-lc -lgcc -lm -lnosys

#
# The command for extracting images from the linked executables.
#
OBJCOPY=llvm-objcopy-${LLVM_VERSION}

#
# Tell the compiler to include debugging information if the DEBUG environment
# variable is set.
#
ifdef DEBUG
CFLAGS+=-g -D DEBUG -O0
endif


#
# Add the tool specific CFLAGS.
#
CFLAGS+=${CFLAGSclang}

#
# Add the include file paths to AFLAGS and CFLAGS.
#
AFLAGS+=${patsubst %,-I%,${subst :, ,${IPATH}}}
CFLAGS+=${patsubst %,-I%,${subst :, ,${IPATH}}}

#
# The rule for building the object file from each C source file.
#
${COMPILER}${SUFFIX}/%.o: %.c
	@if [ 'x${VERBOSE}' = x ];                            \
	 then                                                 \
	     echo "  CC    ${<}";                             \
	 else                                                 \
	     echo ${CC} ${CFLAGS} ${EXTRA_CFLAGS} -D${COMPILER} -o ${@} ${<}; \
	 fi
	@${CC} ${CFLAGS} ${EXTRA_CFLAGS} -D${COMPILER} -o ${@} ${<}

#
# The rule for building the object file from each assembly source file.
#
${COMPILER}${SUFFIX}/%.o: %.S
	@if [ 'x${VERBOSE}' = x ];                               \
	 then                                                    \
	     echo "  AS    ${<}";                                \
	 else                                                    \
	     echo ${CC} ${AFLAGS} -D${COMPILER} -o ${@} -c ${<}; \
	 fi
	@${CC} ${AFLAGS} -D${COMPILER} -o ${@} -c ${<}

#
# The rule for creating an object library.
#
${COMPILER}${SUFFIX}/%.a:
	@if [ 'x${VERBOSE}' = x ];     \
	 then                          \
	     echo "  AR    ${@}";      \
	 else                          \
	     echo ${AR} -cr ${@} ${^}; \
	 fi
	@${AR} -cr ${@} ${^}

#
# The rule for linking the application.
#
${COMPILER}${SUFFIX}/%.axf:
	@if [ 'x${SCATTERclang_${notdir ${@:.axf=}}}' = x ];                  \
	 then                                                                 \
	     ldname="${ROOT}/${COMPILER}/standalone.ld";                      \
	 else                                                                 \
	     ldname="${SCATTERclang_${notdir ${@:.axf=}}}";                   \
	 fi;                                                                  \
	 if [ 'x${VERBOSE}' = x ];                                            \
	 then                                                                 \
	     echo "  LD    ${@} ${LNK_SCP}";                                  \
	 else                                                                 \
	     echo ${LD} -T $${ldname}                                         \
	          --entry ${ENTRY_${notdir ${@:.axf=}}}                       \
	          ${LDFLAGSclang_${notdir ${@:.axf=}}}                        \
	          ${LDFLAGS} -o ${@} $(filter %.o %.a, ${^});                 \
	 fi;                                                                  \
	${LD} -T $${ldname}                                                   \
	      --entry ${ENTRY_${notdir ${@:.axf=}}}                           \
	      ${LDFLAGSclang_${notdir ${@:.axf=}}}                            \
	      ${LDFLAGS} -o ${@} $(filter %.o %.a, ${^})                     
	@${OBJCOPY} -O binary ${@} ${@:.axf=.bin}


# For reference, the correct build commands look something like this:
#
# clang-12
# -mcpu=cortex-m4 -mfpu=fpv4-sp-d16 -mfloat-abi=hard
# -ffunction-sections -fdata-sections -MD -std=c99 -Wall -pedantic -DPART_TM4C123GH6PM -c -g -D DEBUG -O0 -DTARGET_IS_TM4C123_RB1 -I./inc -I./lib/tivaware -DOLDEST_VERSION=0
# -target armv7em-none-eabi -mthumb --sysroot=/usr/lib/arm-none-eabi -Dclang -o clang/eeprom_impl.o ./src/eeprom_impl.c
#
# ld.lld-12 -T ./lib/tivaware/bootloader.ld
# --entry Bootloader_Startup --gc-sections --check-sections --no-dynamic-linker
# -L/usr/lib/arm-none-eabi/lib/thumb/v7e-m+fp/hard
# -L/usr/lib/gcc/arm-none-eabi/9.2.1/thumb/v7e-m+fp/hard/
# -lc -lgcc -lm -lnosys
# -o clang/bootloader.axf
# clang/bootloader.o clang/flash.o clang/flash_impl.o clang/uart.o clang/uart_impl.o clang/gpio_impl.o clang/sysctl_impl.o clang/eeprom_impl.o clang/startup_clang.o
