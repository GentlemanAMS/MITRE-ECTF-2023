var searchIndex = JSON.parse('{\
"ucsc_ectf_car":{"doc":"The entry point for the car firmware.","t":"RFAAFFFF","n":["MAX_MESSAGE_SIZE","__cortex_m_rt_main","eeprom_messages","unlock","get_feature_message","get_unlock_message","process_msg","unlock_car"],"q":["ucsc_ectf_car","","","","ucsc_ectf_car::eeprom_messages","","ucsc_ectf_car::unlock",""],"d":["The maximum size of a message that can be received/sent.","","","","Get a feature message from the EEPROM.","Get the unlock message from the EEPROM.","","Unlocks the car."],"i":[0,0,0,0,0,0,0,0],"f":[0,[[],1],0,0,[[2,3],4],[2],[[5,6]],[[5,7]]],"p":[[15,"never"],[3,"EepromController"],[6,"FeatureNumber"],[4,"Option"],[3,"Runtime"],[4,"Uart1Message"],[3,"UnlockChallengeResponse"]]},\
"ucsc_ectf_eeprom_layout":{"doc":"This crate contains definitions for the EEPROM layout.","t":"RRRRNNRRDIEERRRRRRRNNNNNNNRNRRRRRRRRRRRNNNNNNNRRRNRRRNNNMLLLLLLLLLLLKLLLLLMLLLLLLLLL","n":["BYTE_FIELD_SIZE","CAR_ENCRYPTION_KEY_BOUNDS","CAR_ID_BOUNDS","CAR_ID_SIZE","CarEncryptionKey","CarId","EEPROM_MESSAGES_START_ADDRESS","EEPROM_START_ADDRESS","EepromFieldBounds","EepromReadField","EepromReadOnlyField","EepromReadWriteField","FEATURE_ONE_MESSAGE_BOUNDS","FEATURE_ONE_SIGNED_PACKAGED_BOUNDS","FEATURE_THREE_MESSAGE_BOUNDS","FEATURE_THREE_SIGNED_PACKAGED_BOUNDS","FEATURE_TWO_MESSAGE_BOUNDS","FEATURE_TWO_SIGNED_PACKAGED_BOUNDS","FEATURE_VERIFYING_KEY_BOUNDS","FeatureOneMessage","FeatureOneSignedPackaged","FeatureThreeMessage","FeatureThreeSignedPackaged","FeatureTwoMessage","FeatureTwoSignedPackaged","FeatureVerifyingKey","KEY_FOB_ENCRYPTION_KEY_BOUNDS","KeyFobEncryptionKey","MESSAGE_SIZE","PACKAGED_FEATURE_SIGNED_SIZE","PAIRED_FOB_PAIRING_PUBLIC_KEY_SIGNATURE_BOUNDS","PAIRED_FOB_PAIRING_SIGNING_KEY_BOUNDS","PAIRING_BYTE_BOUNDS","PAIRING_LONGER_COOLDOWN_BYTE_BOUNDS","PAIRING_MANUFACTURER_PAIRED_FOB_VERIFYING_KEY_BOUNDS","PAIRING_MANUFACTURER_UNPAIRED_FOB_VERIFYING_KEY_BOUNDS","PAIRING_PIN_BOUNDS","PAIRING_PIN_SIZE","PUBLIC_KEY_SIZE","PairedFobPairingPublicKeySignature","PairedFobPairingSigningKey","PairingByte","PairingLongerCooldownByte","PairingManufacturerPairedFobVerifyingKey","PairingManufacturerUnpairedFobVerifyingKey","PairingPin","SECRET_SEED_BOUNDS","SECRET_SIZE","SIGNATURE_SIZE","SecretSeed","UNLOCK_MESSAGE_BOUNDS","UNPAIRED_FOB_PAIRING_PUBLIC_KEY_SIGNATURE_BOUNDS","UNPAIRED_FOB_PAIRING_SIGNING_KEY_BOUNDS","UnlockMessage","UnpairedFobPairingPublicKeySignature","UnpairedFobPairingSigningKey","address","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","from","from","from","get_field_bounds","get_field_bounds","get_field_bounds","into","into","into","size","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id"],"q":["ucsc_ectf_eeprom_layout","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["The size of a byte. Deal with it.","The bounds of the car encryption key (unlock key 2) EEPROM …","The bounds of the car ID EEPROM field.","The size of the car ID. 32 bits = 4 bytes.","The key used to facilitate encrypted communications from a …","The car ID.","The start address of the EEPROM reserved message space.","The start address of the EEPROM.","A struct for EEPROM field bounds.","A trait for all readable EEPROM fields.","This enum specifies the fields of the EEPROM that can be …","This enum specifies the fields of the EEPROM that can be …","The bounds of the feature one message EEPROM field.","The bounds of the feature one signed packaged feature …","The bounds of the feature three message EEPROM field.","The bounds of the feature three signed packaged feature …","The bounds of the feature two message EEPROM field.","The bounds of the feature two signed packaged feature …","The bounds of the feature verifying key EEPROM field.","The message to be printed when feature one is enabled.","The signed packaged feature for feature one.","The message to be printed when feature three is enabled.","The signed packaged feature for feature three.","The message to be printed when feature two is enabled.","The signed packaged feature for feature two.","The DER-encoded verifying key used to verify packaged …","The bounds of the key fob encryption key (unlock key 1) …","The key used to facilitate encrypted communications from a …","The size of unlock/feature messages.","The size of a signed packaged feature.","The bounds of the paired fob’s pairing public key …","The bounds of the paired fob’s pairing signing key …","The bounds of the pairing byte EEPROM field.","The bounds of the pairing longer cooldown byte EEPROM …","The bounds of the paired fob’s manufacturer pairing …","The bounds of the unpaired fob’s manufacturer pairing …","The bounds of the pairing PIN EEPROM field.","The size of the pairing PIN.","The max size of Postcard-encoded public keys.","The signature of the SEC1 public key-signing key used for …","The secret of the key used for the key-signing key in the …","Whether or not a key fob is paired with a car.","Whether or not the longer pairing cooldown is active.","The DER-encoded verifying key used for verifying a paired …","The DER-encoded verifying key used for verifying an …","The pairing PIN used to authenticate the pairing of an …","The bounds of the secret seed EEPROM field.","The size of encryption secrets. 256 bits = 32 bytes.","The size of Postcard-encoded signatures.","The key used as a starting point for the RNG seed hash.","The bounds of the unlock message EEPROM field.","The bounds of the unpaired fob’s pairing public key …","The bounds of the unpaired fob’s pairing signing key …","The message to be printed when the car is successfully …","The signature of the SEC1 public key-signing key used for …","The secret of the key used for the key-signing key in the …","The address of the EEPROM field.","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the bounds of the EEPROM field.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The size of the EEPROM field.","","","","","","","","",""],"i":[0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,1,2,1,2,1,0,2,0,0,0,0,0,0,0,0,0,0,0,1,1,2,2,1,1,2,0,0,0,1,0,0,0,1,2,2,3,3,1,2,3,1,2,1,2,3,1,2,6,1,2,3,1,2,3,3,1,2,3,1,2,3,1,2],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[1,1],[2,2],[[]],[[]],[[]],[[],3],[1,3],[2,3],[[]],[[]],[[]],0,[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],5],[[],5],[[],5]],"p":[[4,"EepromReadOnlyField"],[4,"EepromReadWriteField"],[3,"EepromFieldBounds"],[4,"Result"],[3,"TypeId"],[8,"EepromReadField"]]},\
"ucsc_ectf_fob":{"doc":"The entry point for the key fob firmware.","t":"RRRFAAAFFFRFFAFAFFFFFFFFFFFFFRRFFFFFFFF","n":["MAX_MESSAGE_SIZE","MS_TO_WAIT_FOR_MSG","UNPAIRED","__cortex_m_rt_main","features","pairing","unlock","get_installed_feature","paired_process_msg","send_ack","PAIRING_PIN_REAL_SIZE","check_pin_and_diffie_hellman","check_pin_attempt","diffie_hellman","paired_process_msg","pairing_sequence","send_ack","set_pairing_longer_cooldown_byte","spin_pin_cooldown_timer","unpaired_listen_and_pair","diffie_hellman_set_key","generate_ephemeral_key","get_pairing_public_key_signature","prepare_and_send_diffie_hellman_message","recv_verified_ephemeral_public_key","run_paired","run_unpaired","send_diffie_hellman_msg","sign_ephemeral_public_key","ZEROED_SECRET","ZEROED_SIGNATURE","generate_and_send_challenge","generate_challenge_response_msg","recv_challenge_response","run_paired","run_unpaired","turn_unpaired_to_paired","unpaired_recv_verified_pairing_info","process_button_press"],"q":["ucsc_ectf_fob","","","","","","","ucsc_ectf_fob::features","","","ucsc_ectf_fob::pairing","","","","","","","","","","ucsc_ectf_fob::pairing::diffie_hellman","","","","","","","","","ucsc_ectf_fob::pairing::pairing_sequence","","","","","","","","","ucsc_ectf_fob::unlock"],"d":["The maximum size of a message that can be received/sent.","","","","","","","Gets the feature with the given feature number if it is …","","","","","Checks a pairing PIN with a cooldown if the PIN is …","","Processes pairing messages while paired.","","","","Gets the pairing longer cooldown byte and spins a cooldown …","Processes pairing messages while unpaired.","Performs the Diffie-Hellman function, and sets the UART1 …","Generates an ephemeral key. Inlined to prevent copying of …","Gets the pairing public key signature from the EEPROM.","Prepares and sends a Diffie-Hellman message. Inlined to …","Waits for up to the expiration of <code>timeout_timer</code> to receive …","Performs the Diffie-Hellman key exchange as a paired key …","Performs the Diffie-Hellman key exchange as an unpaired …","Sends a Diffie-Hellman message.","Signs the ephemeral public key with the pairing private …","","","Generates a sends a challenge message.","","Receives a pairing challenge response message. Inlined to …","","","Updates the EEPROM with the pairing challenge response …","Processes a pairing request, sends a pairing challenge, …",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[0,0,0,[[],1],0,0,0,[[2,3],[[5,[4]]]],[[6,7]],[[6,8]],0,[[6,9,10],8],[[6,9],8],0,[[6,7]],0,[6],[[6,8]],[[2,11],10],[6],[[6,12,13]],[6,13],[[6,8],14],[[6,8],[[5,[13]]]],[[15,2,16,8],[[5,[12]]]],[6,8],[6,8],[[6,12,14,12,14],8],[[6,8,12]],0,0,[[6,17],[[5,[17]]]],[[6,17,17],18],[6,[[5,[18]]]],[6],[6,8],[[6,18]],[6,[[5,[18]]]],[6]],"p":[[15,"never"],[3,"EepromController"],[6,"FeatureNumber"],[3,"PackagedFeatureSigned"],[4,"Option"],[3,"Runtime"],[4,"Uart0Message"],[15,"bool"],[15,"u32"],[15,"u8"],[3,"HibController"],[6,"PublicKey"],[6,"SecretKey"],[6,"Signature"],[3,"Uart1Controller"],[3,"HibTimer"],[6,"Nonce"],[3,"PairingChallengeResponse"]]},\
"ucsc_ectf_util_common":{"doc":"This crate contains utility modules for use by the car, …","t":"AAAENNGINILLLLLLLAKKKLLLAAGQIRIDDAKMMMMKMGGRRRGRGDDLLLLLLMMMMLLLLLLMLLLLLLLLLLDILALLLKMLLLLLLMLLLNNRELLLLFLLFFFFLLLGNDDNNRRRRRRRRRGDNGRGDDDNDNDNNDNEEDNDNDDNRRDRREEEEEEEEEEEDDDDDDDDDDDDDDDDDDDDDDDDDDDNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLCLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLIKKK","n":["communication","messages","timer","CommunicationError","InternalError","RecvError","Result","RxChannel","SendError","TxChannel","borrow","borrow_mut","clone","eq","fmt","from","into","lower_layers","recv_with_data_timeout","recv_with_timeout","send","try_from","try_into","type_id","crypto","framing","Key","KeyType","KeyedChannel","METADATA_SIZE","RandomSource","XChacha20Poly1305RxChannel","XChacha20Poly1305TxChannel","chachapoly1305","change_key","channel","channel","decryptor","encryptor","fill_rand_slice","random_source","ChannelAlgorithm","Key","METADATA_SIZE","METADATA_SIZE","NONCE_SIZE","NonceSize","TAG_SIZE","TagSize","XChacha20Poly1305RxChannel","XChacha20Poly1305TxChannel","borrow","borrow","borrow_mut","borrow_mut","change_key","change_key","channel","channel","decryptor","encryptor","from","from","into","into","new","new","random_source","recv_with","recv_with_data_timeout","recv_with_timeout","send","try_from","try_from","try_into","try_into","type_id","type_id","Frame","FramedTxChannel","append","bogoframing","borrow","borrow_mut","default","frame","frame_components","from","into","into_iter","is_empty","len","new","total_len","try_from","try_into","type_id","ByteLevel","FrameLevel","HEX_ARRAY_LEN","TimeoutType","borrow","borrow_mut","clone","eq","frame_bogoframe","from","into","read_hex_nibble","recv_bogoframe","recv_frame_with_data_timeout","recv_frame_with_timeout","try_from","try_into","type_id","CarId","DiffieHellman","DiffieHellmanMessage","EnableFeatureMessage","EnableFeatureRequest","EnableFeatureResponse","FIELDS","FIELDS","FIELDS","FIELDS","FIELDS","FIELDS","FIELDS","FIELDS","FIELDS","FeatureNumber","HostToolAck","HostUnlock","Key","NUM_FEATURES","Nonce","PackagedFeatureSigned","PackagedFeatureUnsigned","PairingChallenge","PairingChallenge","PairingChallengeResponse","PairingChallengeResponse","PairingPin","PairingPin","PairingPinResponse","PairingRequest","PairingRequest","Uart0Message","Uart1Message","UnlockChallenge","UnlockChallenge","UnlockChallengeResponse","UnlockChallengeResponse","UnlockMessage","UnlockRequest","UnlockRequest","VARIANTS","VARIANTS","VerifiedPublicKey","_DERIVE_Drop_FOR_PairingChallengeResponse","_DERIVE_Drop_FOR_PairingPin","__Field","__Field","__Field","__Field","__Field","__Field","__Field","__Field","__Field","__Field","__Field","__FieldVisitor","__FieldVisitor","__FieldVisitor","__FieldVisitor","__FieldVisitor","__FieldVisitor","__FieldVisitor","__FieldVisitor","__FieldVisitor","__FieldVisitor","__FieldVisitor","__Visitor","__Visitor","__Visitor","__Visitor","__Visitor","__Visitor","__Visitor","__Visitor","__Visitor","__Visitor","__Visitor","__Visitor","__Visitor","__Visitor","__Visitor","__Visitor","__field0","__field0","__field0","__field0","__field0","__field0","__field0","__field0","__field0","__field0","__field0","__field1","__field1","__field1","__field1","__field1","__field1","__field1","__field1","__field1","__field1","__field1","__field2","__field2","__field2","__field2","__field2","__field3","__field3","__field3","__field3","__field4","__field4","__field4","__field5","__field5","__field6","__ignore","__ignore","__ignore","__ignore","__ignore","__ignore","__ignore","__ignore","__ignore","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","car_encryption_key","car_id","car_id","car_id","car_id","car_id","challenge","challenge","challenge_response","challenge_response","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","ephemeral_public_key","expecting","expecting","expecting","expecting","expecting","expecting","expecting","expecting","expecting","expecting","expecting","expecting","expecting","expecting","expecting","expecting","expecting","expecting","expecting","expecting","expecting","expecting","expecting","expecting","expecting","expecting","expecting","feature_msgs","feature_number","feature_nums","features","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","heapless","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","key_fob_encryption_key","key_signing_public_key","lifetime","lifetime","lifetime","lifetime","lifetime","lifetime","lifetime","lifetime","lifetime","lifetime","lifetime","lifetime","lifetime","lifetime","lifetime","lifetime","marker","marker","marker","marker","marker","marker","marker","marker","marker","marker","marker","marker","marker","marker","marker","marker","packaged_feature","pairing_pin","public_key","public_key_signature","request_nonce","request_nonce","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","signature","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unlock_msg","verify_and_get_key","visit_bytes","visit_bytes","visit_bytes","visit_bytes","visit_bytes","visit_bytes","visit_bytes","visit_bytes","visit_bytes","visit_bytes","visit_bytes","visit_enum","visit_enum","visit_map","visit_map","visit_map","visit_map","visit_map","visit_map","visit_map","visit_map","visit_map","visit_newtype_struct","visit_newtype_struct","visit_newtype_struct","visit_newtype_struct","visit_newtype_struct","visit_seq","visit_seq","visit_seq","visit_seq","visit_seq","visit_seq","visit_seq","visit_seq","visit_seq","visit_seq","visit_seq","visit_seq","visit_seq","visit_seq","visit_str","visit_str","visit_str","visit_str","visit_str","visit_str","visit_str","visit_str","visit_str","visit_str","visit_str","visit_u64","visit_u64","visit_u64","visit_u64","visit_u64","visit_u64","visit_u64","visit_u64","visit_u64","visit_u64","visit_u64","zeroize","zeroize","Timer","duration","poll","reset"],"q":["ucsc_ectf_util_common","","","ucsc_ectf_util_common::communication","","","","","","","","","","","","","","","","","","","","","ucsc_ectf_util_common::communication::lower_layers","","ucsc_ectf_util_common::communication::lower_layers::crypto","","","","","","","","","","","","","","","ucsc_ectf_util_common::communication::lower_layers::crypto::chachapoly1305","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ucsc_ectf_util_common::communication::lower_layers::framing","","","","","","","","","","","","","","","","","","","ucsc_ectf_util_common::communication::lower_layers::framing::bogoframing","","","","","","","","","","","","","","","","","","ucsc_ectf_util_common::messagesucsc_ectf_util_common::timer","","",""],"d":["This module contains traits to implement the BogoStack and …","This module is responsible for providing <code>serde</code> …","Provides a common trait to implement a timer with the <code>Timer</code>…","The possible errors that can occur while sending or …","An error that can occur if an internal error is …","An error that can occur during a receive operation. See …","Type definition for any <code>CommunicationError</code> <code>Results</code>.","A channel to receive data from. See the documentation for …","An error that can occur during a send operation. See …","A channel to send data through. See the documentation for …","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","This module contains submodules for the layers below the …","Receives data from the channel, putting the data received …","Receives data from the channel, putting the data received …","Sends the data from <code>src</code> through the channel. Upon an …","","","","This module encompasses the encryption and integrity layer …","This module encompasses the framing layer of the …","Key type (256-bits/32-bytes).","The type of the key used in the channel.","Implemented for any channel that has encryption/decryption …","The total metadata size required when receiving on a …","Trait used for secure channels when they need random …","This <code>RxChannel</code> wraps around another <code>RxChannel</code> to decrypt …","This <code>TxChannel</code> wraps around a <code>FramedTxChannel</code> to encrypt …","","Changes the encryption/decryption key for this channel to …","","","","","Fills the provided slice with random bytes.","","This typedef can be used to change what algorithm the …","Key type (256-bits/32-bytes).","The total metadata size required when receiving on a …","","","","","","This <code>RxChannel</code> wraps around another <code>RxChannel</code> to decrypt …","This <code>TxChannel</code> wraps around a <code>FramedTxChannel</code> to encrypt …","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates a new <code>XChacha20Poly1305RxChannel</code> given an inner …","Creates a new <code>XChacha20Poly1305TxChannel</code> given an inner …","","","Receives data from the channel, putting the data received …","Receives data from the channel, putting the data received …","Sends the data from <code>src</code> through the channel. Upon an …","","","","","","","A struct that keeps track of slices of u8’s to write as …","A trait to be implemented by all transmission channels in …","Adds a slice to the frame.","The functions in this module are to help implement …","","","","Transmits a frame through the <code>TxChannel</code> given a closure …","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","Checks if the <code>Frame</code> is empty.","Gets the length of the frame in bytes.","Instantiates a new <code>Frame</code>. See the struct documentation for …","","","","","","","","","","","","","Sends a BogoFrame with the given <code>Frame</code>. This function …","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Reads a hex nibble, returning <code>Ok(None)</code> if \\\\1 character is …","Receives a bogoframe. <code>TimeoutType</code> determines whether the …","Receives a BogoFrame with the timeout provided by the …","Receives a BogoFrame, blocking until the timer has elapsed …","","","","The car ID type","A message sent either from a paired key fob to an unpaired …","A message containing the public key associated with the …","A message containing a signed packaged feature to enable a …","A message sent from the enable feature host tool to a …","The response sent from a paired key fob to the enable …","","","","","","","","","","The feature number type","An acknowledgement to a request sent by a host tool. The …","A message sent from a car to the unlock host tool …","Key type (256-bits/32-bytes).","The number of features.","The type for a nonce/challenge.","A signed packaged feature associated with the car it’s …","A packaged feature, containing the Car ID and Feature …","The message to send to a paired key fob that initiated a …","A unique challenge sent from a paired key fob to an …","The response to send for a <code>PairingChallenge</code>. It contains …","The response to a challenge sent from a paired key fob …","A struct containing the pairing pin needed to initiate a …","A message sent from the pairing host tool to a paired key …","The response sent from an unpaired key fob to the pairing …","A message to send to an unpaired key fob to initiate a …","A message sent by a paired key fob to an unpaired key fob …","This enum represents all possible messages that can be …","This enum represents all possible messages that can be …","The message to send to a paired key fob that initiated an …","A unique challenge sent from a car to its paired key fob …","The response to send for an <code>UnlockChallenge</code>. It contains …","The response to a challenge sent from a car containing the …","The message containing the unlock secret, the feature …","The message to send to a car to signal the start of an …","A message sent from a paired key fob to its car to signal …","","","A signed public keyhe key to decrypt messages sent from the car that the key …","The ID of the car to be unlocked.","The ID of the car this feature is meant for.","The ID of the car to be unlocked.","The car ID.","The ID of the car the key fob will be paired to.","The unique 128-bit challenge to use to maintain freshness.","The unique challenge for the paired key fob to respond to …","The <code>Nonce</code> in the <code>UnlockChallenge</code> sent before this response.","The <code>Nonce</code> from the challenge given by the unpaired key fob.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The public key associated with the ephermeral secret …","","","","","","","","","","","","","","","","","","","","","","","","","","","","The feature secrets for the enabled secrets on the car.","The number for the feature to enable on the linked car","The enabled features on the car.","A list of features that are enabled for this car.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The key to encrypt messages sent from the key fob that is …","The public key associated with the private key that signed …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The helper struct containing the Car ID and Feature Number.","The pairing PIN to use to pair future key fobs.","The public key in SEC1 format.","The signature authenticating <code>public_key</code> in byte format.","The <code>Nonce</code> from the original <code>PairingRequest</code> sent.","The <code>Nonce</code> sent in the original <code>PairingRequest</code> to the …","","","","","","","","","","","","","","","","","A signature for the car ID and feature number encoded in …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The unlock secret for the car.","Verifies and gets the public key.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","This trait represents a timer that can be poll and reset. …","Gets the total duration of the timer.","Polls the timer to see if time is up, returning <code>true</code> if it …","Resets the timer back to its original duration."],"i":[0,0,0,0,1,1,0,0,1,0,1,1,1,1,1,1,1,0,10,10,82,1,1,1,0,0,0,83,0,0,0,0,0,0,83,11,14,11,14,13,14,0,0,0,0,0,0,0,0,0,0,11,14,11,14,11,14,11,14,11,14,11,14,11,14,11,14,14,11,11,11,14,11,14,11,14,11,14,0,0,17,0,17,17,17,12,17,17,17,17,17,17,17,17,17,17,17,18,18,0,0,18,18,18,18,0,18,18,0,0,0,0,18,18,18,0,24,0,0,22,22,0,0,0,0,0,0,0,0,0,0,0,22,0,0,0,0,0,0,24,0,24,0,22,22,0,24,0,0,0,24,0,24,0,0,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,23,25,28,30,32,34,36,41,43,46,48,23,25,28,30,32,34,36,41,43,46,48,23,25,34,36,48,23,25,36,48,23,25,48,25,48,25,28,30,32,34,36,41,43,46,48,22,23,49,50,24,25,51,52,26,53,27,28,54,55,29,30,56,57,31,32,58,59,33,34,60,61,35,36,62,63,37,64,38,65,39,66,40,41,67,68,42,43,69,70,44,71,45,46,72,73,47,48,74,75,22,23,49,50,24,25,51,52,26,53,27,28,54,55,29,30,56,57,31,32,58,59,33,34,60,61,35,36,62,63,37,64,38,65,39,66,40,41,67,68,42,43,69,70,44,71,45,46,72,73,47,48,74,75,47,27,29,33,35,47,27,45,33,47,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,38,47,42,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,35,29,35,33,49,50,51,52,53,54,55,29,56,57,31,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,22,23,49,50,24,25,51,52,26,53,27,28,54,55,29,30,56,57,31,32,58,59,33,34,60,61,35,36,62,63,37,64,38,65,39,66,40,41,67,68,42,43,69,70,44,71,45,46,72,73,47,48,74,75,0,22,23,49,50,24,25,51,52,26,53,27,28,54,55,29,30,56,57,31,32,58,59,33,34,60,61,35,36,62,63,37,64,38,65,39,66,40,41,67,68,42,43,69,70,44,71,45,46,72,73,47,48,74,75,47,42,50,52,53,55,57,59,61,63,64,65,66,68,70,71,73,75,50,52,53,55,57,59,61,63,64,65,66,68,70,71,73,75,31,47,40,40,45,47,22,24,26,27,29,31,33,35,37,38,39,40,42,44,45,47,31,22,23,49,50,24,25,51,52,26,53,27,28,54,55,29,30,56,57,31,32,58,59,33,34,60,61,35,36,62,63,37,64,38,65,39,66,40,41,67,68,42,43,69,70,44,71,45,46,72,73,47,48,74,75,22,23,49,50,24,25,51,52,26,53,27,28,54,55,29,30,56,57,31,32,58,59,33,34,60,61,35,36,62,63,37,64,38,65,39,66,40,41,67,68,42,43,69,70,44,71,45,46,72,73,47,48,74,75,22,23,49,50,24,25,51,52,26,53,27,28,54,55,29,30,56,57,31,32,58,59,33,34,60,61,35,36,62,63,37,64,38,65,39,66,40,41,67,68,42,43,69,70,44,71,45,46,72,73,47,48,74,75,35,40,49,51,54,56,58,60,62,67,69,72,74,50,52,55,57,59,61,63,68,70,73,75,53,64,65,66,71,53,55,57,59,61,63,64,65,66,68,70,71,73,75,49,51,54,56,58,60,62,67,69,72,74,49,51,54,56,58,60,62,67,69,72,74,38,47,0,84,84,84],"f":[0,0,0,0,0,0,0,0,0,0,[[]],[[]],[1,1],[[1,1],2],[[1,3],4],[[]],[[]],0,[[],[[6,[5]]]],[[],[[6,[5]]]],[[],6],[[],7],[[],7],[[],8],0,0,0,0,0,0,0,0,0,0,[[]],0,0,0,0,[9],0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[[11,[10]]]],[[[14,[12,13]]]],0,0,0,0,[[]],[[]],[[]],[[]],[[10,15],[[11,[10]]]],[[12,13,15],[[14,[12,13]]]],0,[[[11,[10]],16],[[6,[5]]]],[[[11,[10]]],[[6,[5]]]],[[[11,[10]]],[[6,[5]]]],[[[14,[12,13]]],6],[[],7],[[],7],[[],7],[[],7],[[],8],[[],8],0,0,[17,[[7,[17,1]]]],0,[[]],[[]],[[],17],[16,[[7,[1]]]],0,[[]],[[]],[17],[17,2],[17,5],[[],17],0,[[],7],[[],7],[[],8],0,0,0,0,[[]],[[]],[18,18],[[18,18],2],[[17,19,5],6],[[]],[[]],[[19,18],[[6,[[21,[20]]]]]],[[19,5,18],[[6,[5]]]],[[19,5],[[6,[5]]]],[[19,5],[[6,[5]]]],[[],7],[[],7],[[],8],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,[[],[[7,[22]]]],[[],[[7,[23]]]],[[],[[7,[24]]]],[[],[[7,[25]]]],[[],[[7,[26]]]],[[],[[7,[27]]]],[[],[[7,[28]]]],[[],[[7,[29]]]],[[],[[7,[30]]]],[[],[[7,[31]]]],[[],[[7,[32]]]],[[],[[7,[33]]]],[[],[[7,[34]]]],[[],[[7,[35]]]],[[],[[7,[36]]]],[[],[[7,[37]]]],[[],[[7,[38]]]],[[],[[7,[39]]]],[[],[[7,[40]]]],[[],[[7,[41]]]],[[],[[7,[42]]]],[[],[[7,[43]]]],[[],[[7,[44]]]],[[],[[7,[45]]]],[[],[[7,[46]]]],[[],[[7,[47]]]],[[],[[7,[48]]]],[38],[47],0,[[49,3],4],[[50,3],4],[[51,3],4],[[52,3],4],[[53,3],4],[[54,3],4],[[55,3],4],[[56,3],4],[[57,3],4],[[58,3],4],[[59,3],4],[[60,3],4],[[61,3],4],[[62,3],4],[[63,3],4],[[64,3],4],[[65,3],4],[[66,3],4],[[67,3],4],[[68,3],4],[[69,3],4],[[70,3],4],[[71,3],4],[[72,3],4],[[73,3],4],[[74,3],4],[[75,3],4],0,0,0,0,[3,[[7,[76]]]],[3,[[7,[76]]]],[3,[[7,[76]]]],[3,[[7,[76]]]],[3,[[7,[76]]]],[3,[[7,[76]]]],[3,[[7,[76]]]],[[29,3],4],[3,[[7,[76]]]],[3,[[7,[76]]]],[[31,3],4],[3,[[7,[76]]]],[3,[[7,[76]]]],[3,[[7,[76]]]],[3,[[7,[76]]]],[3,[[7,[76]]]],[3,[[7,[76]]]],[3,[[7,[76]]]],[3,[[7,[76]]]],[3,[[7,[76]]]],[3,[[7,[76]]]],[3,[[7,[76]]]],[3,[[7,[76]]]],[3,[[7,[76]]]],[3,[[7,[76]]]],[3,[[7,[76]]]],[3,[[7,[76]]]],[3,[[7,[76]]]],[3,[[7,[76]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[22,7],[24,7],[26,7],[27,7],[29,7],[31,7],[33,7],[35,7],[37,7],[38,7],[39,7],[40,7],[42,7],[44,7],[45,7],[47,7],0,[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],0,[[40,77],[[21,[78]]]],[49,7],[51,7],[54,7],[56,7],[58,7],[60,7],[62,7],[67,7],[69,7],[72,7],[74,7],[50,7],[52,7],[55,7],[57,7],[59,7],[61,7],[63,7],[68,7],[70,7],[73,7],[75,7],[53,7],[64,7],[65,7],[66,7],[71,7],[53,7],[55,7],[57,7],[59,7],[61,7],[63,7],[64,7],[65,7],[66,7],[68,7],[70,7],[71,7],[73,7],[75,7],[[49,79],7],[[51,79],7],[[54,79],7],[[56,79],7],[[58,79],7],[[60,79],7],[[62,79],7],[[67,79],7],[[69,79],7],[[72,79],7],[[74,79],7],[[49,80],7],[[51,80],7],[[54,80],7],[[56,80],7],[[58,80],7],[[60,80],7],[[62,80],7],[[67,80],7],[[69,80],7],[[72,80],7],[[74,80],7],[38],[47],0,[[],81],[[],2],[[]]],"p":[[4,"CommunicationError"],[15,"bool"],[3,"Formatter"],[6,"Result"],[15,"usize"],[6,"Result"],[4,"Result"],[3,"TypeId"],[8,"AsMut"],[8,"RxChannel"],[3,"XChacha20Poly1305RxChannel"],[8,"FramedTxChannel"],[8,"RandomSource"],[3,"XChacha20Poly1305TxChannel"],[6,"Key"],[8,"FnOnce"],[3,"Frame"],[4,"TimeoutType"],[8,"FnMut"],[15,"u8"],[4,"Option"],[4,"Uart0Message"],[4,"__Field"],[4,"Uart1Message"],[4,"__Field"],[3,"UnlockRequest"],[3,"UnlockChallenge"],[4,"__Field"],[3,"PackagedFeatureUnsigned"],[4,"__Field"],[3,"PackagedFeatureSigned"],[4,"__Field"],[3,"UnlockChallengeResponse"],[4,"__Field"],[3,"UnlockMessage"],[4,"__Field"],[3,"EnableFeatureMessage"],[3,"PairingPin"],[3,"HostToolAck"],[3,"VerifiedPublicKey"],[4,"__Field"],[3,"DiffieHellmanMessage"],[4,"__Field"],[3,"PairingRequest"],[3,"PairingChallenge"],[4,"__Field"],[3,"PairingChallengeResponse"],[4,"__Field"],[3,"__FieldVisitor"],[3,"__Visitor"],[3,"__FieldVisitor"],[3,"__Visitor"],[3,"__Visitor"],[3,"__FieldVisitor"],[3,"__Visitor"],[3,"__FieldVisitor"],[3,"__Visitor"],[3,"__FieldVisitor"],[3,"__Visitor"],[3,"__FieldVisitor"],[3,"__Visitor"],[3,"__FieldVisitor"],[3,"__Visitor"],[3,"__Visitor"],[3,"__Visitor"],[3,"__Visitor"],[3,"__FieldVisitor"],[3,"__Visitor"],[3,"__FieldVisitor"],[3,"__Visitor"],[3,"__Visitor"],[3,"__FieldVisitor"],[3,"__Visitor"],[3,"__FieldVisitor"],[3,"__Visitor"],[3,"Error"],[6,"VerifyingKey"],[6,"PublicKey"],[15,"str"],[15,"u64"],[3,"Duration"],[8,"TxChannel"],[8,"KeyedChannel"],[8,"Timer"]]},\
"ucsc_ectf_util_no_std":{"doc":"This crate contains utility modules for use by the car and …","t":"DDDDGGGGMMLLLLAMMMMLLAMMMMLLMAMMLLLAMLLMMLMMMMMMMMMLAMMMMMMLMAMLMLMMMMMMMMMAAMMMMMMMAMMMMMMMLLLLMMMMMMMMMMMMMMLMMMMMMMMRRHRHDFMLLLLLLLLLLLLENNGINIDDDMLLLLLLLAKKMMAKLLMMLALAAGQIRIDDLLLLKLLMMMMKLLLLLLMLLLLLLLLLLLDILALLLKMLLLLLLMLLLLFFFGGDDDMLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLMMLLLOLLLLLDDRRLLLLLLLLLLLLLLLLLLMLLLLLMLLLLSRRNNRDEIEENNNNNNNNNRRRRNNNNNNNRRNNNNNSNLLLLLLLLLLLLLMLLLLLLKLLLLLLLMLLLLLLLLLLLLLLLLLLLLFDLLLLLMLLLLLLGNDDNNGDNGRGDDDNDNDNNDNEEDNDNDDNDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMLLLLLLLLLLLLLLLLLLMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLDDDEGGDDDDNDDDNDDMOLLLLLLLLLLLLLLLLLLLLLMLALLLLLLLLLLLLLLLLLLLLLLLLMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLMLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLMMALLLLLLLLLLLLLLLLLLMAMOLLLLLLLLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLAALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLMLMLLLDIEEDMLLLLLLMLLLLLLMLLLLMLLLLLLLLLLLLDGGGGGGLLMLLMLMLLLLLLLDEDDEMMLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLMMLAMLLLLLLLLLLLLLLLLLLLLLLDQIMLALLLLLLLLLLLLLLLLLLLLLLMLLOLLLLLLDDQIOLLMLLMMMMLLLLDDIDDDDDDDIMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLMMMLLLLLLLLLLLLMLMMMMLLLLMLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLDDDDDLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLMMLLLLLLLMMMMLLLMLLLLLLLLLLLLLLLLLLLLHHAFFFRDIAKLLAMLLKLLALLLALDRRLLLLLLMMLLLLRDRLLLMLLLMLLLLDLLLLLLLMMLLLLRRRDLLLLFLFLFMHMLLLLDRHRDHDDGGGGMMLLLLLLLMMMMMMMMMMMLMMMLLLLMMMMMMMMMLMMMMMMOFFFLLLMMLMMMMMMMMMMMMMMMMMMMMMMMMLLLLLLLLLMMMMMMMMMMMMMMLLLMMMMMMMMDSSILLKLMMLLLMLLLKLKLLLLLL","n":["Arc","HibPool","Runtime","RuntimePeripherals","Uart0RxPin","Uart0TxPin","Uart1RxPin","Uart1TxPin","adc0","adc1","as_bits","as_ref","borrow","borrow_mut","button","can0","can1","cbp","clocks","clone","cmp","communication","comp","cpuid","dcb","delay","deref","drop","dwt","eeprom","eeprom","eeprom_controller","encode_hex","encode_hex_upper","eq","features","flash_ctrl","fmt","fmt","fpb","fpu","from","gpio_porta_ahb","gpio_portb_ahb","gpio_portc","gpio_portc_ahb","gpio_portd","gpio_portd_ahb","gpio_porte","gpio_porte_ahb","gpio_portf_ahb","hash","hib","hib","hib_controller","i2c0","i2c1","i2c2","i2c3","into","itm","messages","mpu","new","nvic","partial_cmp","pf4","phantom","pool","power_control","ptr","pwm0","pwm1","qei0","qei1","random","runtime","scb","ssi0","ssi1","ssi2","ssi3","sw1_button_controller","sysexc","timer","timer0","timer1","timer2","timer3","timer4","timer5","tpiu","try_as_bits","try_from","try_into","type_id","uart0_controller","uart0_rx","uart0_tx","uart1_controller","uart1_rx","uart1_tx","uart2","uart3","uart4","uart5","uart6","uart7","udma","usb0","vzip","watchdog0","watchdog1","wtimer0","wtimer1","wtimer2","wtimer3","wtimer4","wtimer5","NVIC_GPIOF_ISER_BIT","NVIC_GPIOF_ISER_BYTE","PF4_ACTIVATED","PF4_PIN_NUMBER","SW1_BUTTON_CONTROLLER_INITIALIZED","Sw1ButtonController","__cortex_m_rt_GPIOF","_pf4","borrow","borrow_mut","clear_activation","drop","from","into","new","poll_for_activation","try_from","try_into","type_id","vzip","CommunicationError","InternalError","RecvError","Result","RxChannel","SendError","TxChannel","Uart0Controller","Uart1Controller","UartRandomSource","_not_constructible","borrow","borrow_mut","clone","eq","fmt","from","into","lower_layers","recv_with_data_timeout","recv_with_timeout","rx_channel","rx_channel","secure_uart","send","try_from","try_into","tx_channel","tx_channel","type_id","uart","vzip","crypto","framing","Key","KeyType","KeyedChannel","METADATA_SIZE","RandomSource","XChacha20Poly1305RxChannel","XChacha20Poly1305TxChannel","borrow","borrow","borrow_mut","borrow_mut","change_key","change_key","change_key","channel","channel","decryptor","encryptor","fill_rand_slice","from","from","into","into","new","new","random_source","recv_with_data_timeout","recv_with_timeout","send","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","Frame","FramedTxChannel","append","bogoframing","borrow","borrow_mut","default","frame","frame_components","from","into","into_iter","is_empty","len","new","total_len","try_from","try_into","type_id","vzip","frame_bogoframe","recv_frame_with_data_timeout","recv_frame_with_timeout","EncryptedUartRxChannel","EncryptedUartTxChannel","Uart0Controller","Uart1Controller","UartRandomSource","_not_constructible","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","change_rx_key","change_rx_key","change_tx_key","change_tx_key","fill_rand_slice","from","from","from","into","into","into","new","new","recv_with_data_timeout","recv_with_data_timeout","recv_with_timeout","recv_with_timeout","rx_channel","rx_channel","send","send","try_from","try_from","try_from","try_into","try_into","try_into","tx_channel","tx_channel","type_id","type_id","type_id","uart_impl","vzip","vzip","vzip","without_key","without_key","FramedUartRxChannel","FramedUartTxChannel","MIN_FRAMED_UART_MESSAGE","UART_FIFO_LEN","borrow","borrow","borrow_mut","borrow_mut","frame","frame","from","from","into","into","new_uart0_rx_channel","new_uart0_tx_channel","new_uart1_rx_channel","new_uart1_tx_channel","recv_with_data_timeout","recv_with_data_timeout","recv_with_timeout","recv_with_timeout","rx","send","try_from","try_from","try_into","try_into","tx","type_id","type_id","vzip","vzip","BYTES_PER_WORD","BYTE_FIELD_SIZE","CAR_ID_SIZE","CarEncryptionKey","CarId","ERASE_KEY","EepromController","EepromError","EepromReadField","EepromReadOnlyField","EepromReadWriteField","FeatureOneMessage","FeatureOneSignedPackaged","FeatureThreeMessage","FeatureThreeSignedPackaged","FeatureTwoMessage","FeatureTwoSignedPackaged","FeatureVerifyingKey","InitError","KeyFobEncryptionKey","MESSAGE_SIZE","PACKAGED_FEATURE_SIGNED_SIZE","PAIRING_PIN_SIZE","PUBLIC_KEY_SIZE","PairedFobPairingPublicKeySignature","PairedFobPairingSigningKey","PairingByte","PairingLongerCooldownByte","PairingManufacturerPairedFobVerifyingKey","PairingManufacturerUnpairedFobVerifyingKey","PairingPin","SECRET_SIZE","SIGNATURE_SIZE","SecretSeed","SizeError","UnlockMessage","UnpairedFobPairingPublicKeySignature","UnpairedFobPairingSigningKey","WORDS_PER_BLOCK","WritePermissionError","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","checked_get_word_count","clone","clone","drop","dump_mem","eeprom","erase_mem","fmt","from","from","from","from","get_field_bounds","get_field_bounds","get_field_bounds","into","into","into","into","new","power_control","read_slice","set_address","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","wait_for_done","write_slice","verify_packaged_feature_signed","HibController","borrow","borrow_mut","clone","create_timer","from","hib","into","new","try_from","try_into","type_id","vzip","CarId","DiffieHellman","DiffieHellmanMessage","EnableFeatureMessage","EnableFeatureRequest","EnableFeatureResponse","FeatureNumber","HostToolAck","HostUnlock","Key","NUM_FEATURES","Nonce","PackagedFeatureSigned","PackagedFeatureUnsigned","PairingChallenge","PairingChallenge","PairingChallengeResponse","PairingChallengeResponse","PairingPin","PairingPin","PairingPinResponse","PairingRequest","PairingRequest","Uart0Message","Uart1Message","UnlockChallenge","UnlockChallenge","UnlockChallengeResponse","UnlockChallengeResponse","UnlockMessage","UnlockRequest","UnlockRequest","VerifiedPublicKey","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","car_encryption_key","car_id","car_id","car_id","car_id","car_id","challenge","challenge","challenge_response","challenge_response","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","ephemeral_public_key","feature_msgs","feature_number","feature_nums","features","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","key_fob_encryption_key","key_signing_public_key","packaged_feature","pairing_pin","public_key","public_key_signature","request_nonce","request_nonce","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","signature","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unlock_msg","verify_and_get_key","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","zeroize","zeroize","Arc","BinaryHeap","Deque","Entry","FnvIndexMap","FnvIndexSet","HistoryBuffer","IndexMap","IndexSet","LinearMap","Occupied","OccupiedEntry","OldestOrdered","String","Vacant","VacantEntry","Vec","_kind","arc_pool","as_bits","as_bits","as_bits","as_mut","as_mut","as_mut_bits","as_mut_ptr","as_mut_slices","as_mut_str","as_mut_vec","as_ptr","as_ref","as_ref","as_ref","as_ref","as_ref","as_slice","as_slice","as_slices","as_str","back","back","back_mut","binary_heap","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","buf","buffer","buffer","buffer","build_hasher","capacity","capacity","capacity","capacity","capacity","capacity","capacity","capacity","clear","clear","clear","clear","clear","clear","clear","clear","clear_with","clone","clone","clone","clone","clone","clone","clone","clone","cmp","cmp","contains","contains_key","contains_key","core","core","core","cur","data","data","default","default","default","default","default","default","default","default","deref","deref","deref","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","difference","drop","drop","drop","drop","encode_hex","encode_hex","encode_hex","encode_hex_upper","encode_hex_upper","encode_hex_upper","ends_with","entry","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","extend","extend","extend","extend","extend","extend","extend","extend","extend","extend_from_slice","extend_from_slice","extend_from_slice","filled","first","first","first_mut","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_slice","from_str","front","front","front_mut","full","get","get","get","get_mut","get_mut","get_mut","hash","hash","hash","hash","hash_val","index","index","index_mut","index_mut","insert","insert","insert","insert","insert","insert","intersection","into","into","into","into","into","into","into","into","into","into","into","into","into_array","into_bytes","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_key","into_mut","into_vec","is_disjoint","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_full","is_full","is_subset","is_superset","iter","iter","iter","iter","iter","iter_mut","iter_mut","iter_mut","iter_mut","key","key","key","key","keys","keys","last","last","last_mut","len","len","len","len","len","len","len","map","mpmc","ne","ne","ne","new","new","new","new","new","new","new","new","new_with","next","oldest_ordered","partial_cmp","partial_cmp","peek","peek_mut","phantom","pool","pool","pool","pop","pop","pop","pop_back","pop_back_unchecked","pop_front","pop_front_unchecked","pop_unchecked","pop_unchecked","pos","probe","ptr","push","push","push","push_back","push_back_unchecked","push_front","push_front_unchecked","push_str","push_unchecked","push_unchecked","recent","remove","remove","remove","remove","remove","remove_entry","resize","resize_default","retain","retain_mut","serialize","serialize","serialize","serialize","serialize","serialize","set_len","sorted_linked_list","spsc","starts_with","swap_remove","swap_remove","swap_remove_unchecked","symmetric_difference","truncate","truncate","truncate","try_as_bits","try_as_bits","try_as_bits","try_as_mut_bits","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","union","values","values","values_mut","values_mut","vec","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","wrapped","write","write_at","write_char","write_str","write_str","BinaryHeap","Kind","Max","Min","PeekMut","_kind","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","data","deref","deref_mut","drop","from","from","from","heap","into","into","into","pop","sift","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","MpMcQueue","Q16","Q2","Q32","Q4","Q64","Q8","borrow","borrow_mut","buffer","default","dequeue","dequeue_pos","enqueue","enqueue_pos","from","into","new","try_from","try_into","type_id","vzip","Box","Init","Node","Pool","Uninit","_not_send_or_sync","_state","alloc","as_bits","as_mut","as_mut_bits","as_ref","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cmp","data","deref","deref_mut","encode_hex","encode_hex_upper","eq","fmt","fmt","free","from","from","from","from","from","grow","grow_exact","hash","init","into","into","into","into","into","new","next","node","partial_cmp","singleton","stack","try_as_bits","try_as_mut_bits","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","Box","Data","Pool","_pool","alloc","arc","as_bits","as_mut","as_mut_bits","as_ref","borrow","borrow_mut","cmp","deref","deref_mut","drop","encode_hex","encode_hex_upper","eq","fmt","fmt","forget","freeze","from","grow","grow_exact","hash","init","inner","into","partial_cmp","pool","try_as_bits","try_as_mut_bits","try_from","try_into","type_id","vzip","Arc","ArcInner","Data","Pool","arc_pool","borrow","borrow_mut","data","from","into","phantom","pool","ptr","strong","try_from","try_into","type_id","vzip","FindMut","Iter","Kind","LinkedIndexU16","LinkedIndexU8","LinkedIndexUsize","Max","Min","Node","SortedLinkedList","SortedLinkedListIndex","_kind","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","cmp","cmp","cmp","deref","deref_mut","drop","drop","eq","eq","eq","find_mut","finish","fmt","fmt","fmt","fmt","free","from","from","from","from","from","from","from","from","from","head","index","index","into","into","into","into","into","into","into","into","into","into_iter","is_empty","is_full","is_head","iter","list","list","list","maybe_changed","new_u16","new_u8","new_usize","next","next","partial_cmp","partial_cmp","partial_cmp","peek","pop","pop","pop_unchecked","prev_index","push","push_unchecked","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","val","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","Consumer","Iter","IterMut","Producer","Queue","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","buffer","capacity","capacity","capacity","clone","clone","default","dequeue","dequeue","dequeue_unchecked","dequeue_unchecked","drop","enqueue","enqueue","enqueue_unchecked","enqueue_unchecked","eq","fmt","from","from","from","from","from","hash","hash","head","index","index","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","is_empty","is_full","iter","iter_mut","len","len","len","len","len","new","next","next","next_back","next_back","peek","peek","rb","rb","rb","rb","ready","ready","split","tail","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","MAIN_CSPRNG","SECONDARY_CSPRNG","entropy","fill_rand_slice","fill_rand_slice_secondary","init_rng","ENTROPY_HASH_SIZE","EntropyHasher","EntropySource","adc","add_to_hasher","borrow","borrow_mut","clock_drift","entropy","from","hash","init","into","new","secret","try_from","try_into","type_id","uninit_memory","vzip","Adc","DELAY","SAMPLE_SIZE","add_to_hasher","borrow","borrow_mut","from","init","into","next","samples","try_from","try_into","type_id","vzip","CLOCK_DRIFT_ENTROPY_SIZE","ClockDrift","SUBSECONDS_TO_COUNT","add_to_hasher","borrow","borrow_mut","entropy_pool","from","init","into","next","try_from","try_into","type_id","vzip","Secret","add_to_hasher","borrow","borrow_mut","drop","from","init","into","next","secret","try_from","try_into","type_id","vzip","FILE","RANDOM_BYTES_SIZE","SECONDARY_RNG_NUM_BYTES","UninitMemory","add_to_hasher","borrow","borrow_mut","from","get_random_bytes_size","init","init_random_bytes","into","new_rand_callback","next","random_bytes","remove_send_sync","try_from","try_into","type_id","vzip","Arc","BPS","HIB_POOL_MEMORY","HIB_POOL_MEMORY_SIZE","HibPool","POOL","Runtime","RuntimePeripherals","Uart0RxPin","Uart0TxPin","Uart1RxPin","Uart1TxPin","adc0","adc1","alloc","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","can0","can1","cbp","clocks","comp","cpuid","dcb","delay","dwt","eeprom","eeprom_controller","fill_rand_slice","flash_ctrl","fpb","fpu","from","from","from","from","gpio_porta_ahb","gpio_portb_ahb","gpio_portc","gpio_portc_ahb","gpio_portd","gpio_portd_ahb","gpio_porte","gpio_porte_ahb","gpio_portf_ahb","grow","hib","hib_controller","i2c0","i2c1","i2c2","i2c3","init_uart","initialize_sysctl","initialize_uart0","initialize_uart1","into","into","into","itm","mpu","new","nvic","pf4","phantom","pool","power_control","ptr","pwm0","pwm1","qei0","qei1","scb","ssi0","ssi1","ssi2","ssi3","sw1_button_controller","sysexc","timer0","timer1","timer2","timer3","timer4","timer5","tpiu","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","uart0_controller","uart0_rx","uart0_tx","uart1_controller","uart1_rx","uart1_tx","uart2","uart3","uart4","uart5","uart6","uart7","udma","usb0","vzip","vzip","vzip","watchdog0","watchdog1","wtimer0","wtimer1","wtimer2","wtimer3","wtimer4","wtimer5","HibTimer","MICROSECONDS_PER_SECOND","SUBSECONDS_PER_SECOND","Timer","borrow","borrow_mut","duration","duration","duration","end_subseconds","from","get_time","get_time_hib","hib","into","new","new_impl","poll","poll","reset","reset","time_to_subseconds","try_from","try_into","type_id","vzip"],"q":["ucsc_ectf_util_no_std","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ucsc_ectf_util_no_std::button","","","","","","","","","","","","","","","","","","","","ucsc_ectf_util_no_std::communication","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ucsc_ectf_util_no_std::communication::lower_layers","","ucsc_ectf_util_no_std::communication::lower_layers::crypto","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ucsc_ectf_util_no_std::communication::lower_layers::framing","","","","","","","","","","","","","","","","","","","","ucsc_ectf_util_no_std::communication::lower_layers::framing::bogoframing","","","ucsc_ectf_util_no_std::communication::secure_uart","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ucsc_ectf_util_no_std::communication::uart","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ucsc_ectf_util_no_std::eeprom","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ucsc_ectf_util_no_std::features","ucsc_ectf_util_no_std::hib","","","","","","","","","","","","","ucsc_ectf_util_no_std::messagesucsc_ectf_util_no_std::messages::heaplessucsc_ectf_util_no_std::messages::heapless::binary_heap","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ucsc_ectf_util_no_std::messages::heapless::mpmc","","","","","","","","","","","","","","","","","","","","","","ucsc_ectf_util_no_std::messages::heapless::pool","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ucsc_ectf_util_no_std::messages::heapless::pool::singleton","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ucsc_ectf_util_no_std::messages::heapless::pool::singleton::arc","","","","","","","","","","","","","","","","","","ucsc_ectf_util_no_std::messages::heapless::sorted_linked_list","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ucsc_ectf_util_no_std::messages::heapless::spsc","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ucsc_ectf_util_no_std::random","","","","","","ucsc_ectf_util_no_std::random::entropy","","","","","","","","","","","","","","","","","","","","ucsc_ectf_util_no_std::random::entropy::adc","","","","","","","","","","","","","","","ucsc_ectf_util_no_std::random::entropy::clock_drift","","","","","","","","","","","","","","","ucsc_ectf_util_no_std::random::entropy::secret","","","","","","","","","","","","","","ucsc_ectf_util_no_std::random::entropy::uninit_memory","","","","","","","","","","","","","","","","","","","","ucsc_ectf_util_no_std::runtime","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ucsc_ectf_util_no_std::timer","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["<code>std::sync::Arc</code> but backed by a memory <code>Pool</code> rather than …","The memory pool for the HIB peripheral.","The runtime struct.","All peripherals and core peripherals, but with the system …","The RX pin for UART 0.","The TX pin for UART 0.","The RX pin for UART 1.","The TX pin for UART 1.","","","","","","","A button module containing an interface to use the onboard …","","","","","","","This module contains traits to implement the BogoStack and …","","","","","","","","This module contains an interface to read from and write …","","The EEPROM controller.","","","","This module provides a function for verifying signed …","","","","","","Returns the argument unchanged.","","","","","","","","","","","This module contains an interface to use the hibernation …","","The hibernation controller.","","","","","Calls <code>U::from(self)</code>.","","This module is responsible for providing <code>serde</code> …","","Constructs a new <code>Arc</code>","","","","","","","","","","","","This module contains an interface to generate random …","This module contains the runtime struct, which is used to …","","","","","","The SW1 button controller.","","A timer module containing a timer that counts a specific …","","","","","","","","","","","","The controller for UART0. See the documentation for …","","","The controller for UART1. See the documentation for …","","","","","","","","","","","","","","","","","","","","","","Whether the PF4 pin interrupt has been triggered.","The pin number of PF4.","Whether the Sw1ButtonController is initialized.","A struct for the SW1 button controller. The button …","","","","","Clears the activation boolean for the SW1 button.","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Initializes the SW1 button controller.","Returns whether an activation has been occurred for the …","","","","","The possible errors that can occur while sending or …","An error that can occur if an internal error is …","An error that can occur during a receive operation. See …","Type definition for any <code>CommunicationError</code> <code>Results</code>.","A channel to receive data from. See the documentation for …","An error that can occur during a send operation. See …","A channel to send data through. See the documentation for …","An optionally bi-directionally encrypted and authenticated …","An optionally bi-directionally encrypted and authenticated …","The <code>RandomSource</code> used for encrypted UART channels.","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","This module contains submodules for the layers below the …","Receives data from the channel, putting the data received …","Receives data from the channel, putting the data received …","","","","Sends the data from <code>src</code> through the channel. Upon an …","","","","","","","","This module encompasses the encryption and integrity layer …","This module encompasses the framing layer of the …","Key type (256-bits/32-bytes).","The type of the key used in the channel.","Implemented for any channel that has encryption/decryption …","The total metadata size required when receiving on a …","Trait used for secure channels when they need random …","This <code>RxChannel</code> wraps around another <code>RxChannel</code> to decrypt …","This <code>TxChannel</code> wraps around a <code>FramedTxChannel</code> to encrypt …","","","","","Changes the encryption/decryption key for this channel to …","","","","","","","Fills the provided slice with random bytes.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates a new <code>XChacha20Poly1305RxChannel</code> given an inner …","Creates a new <code>XChacha20Poly1305TxChannel</code> given an inner …","","Receives data from the channel, putting the data received …","Receives data from the channel, putting the data received …","Sends the data from <code>src</code> through the channel. Upon an …","","","","","","","","","A struct that keeps track of slices of u8’s to write as …","A trait to be implemented by all transmission channels in …","Adds a slice to the frame.","The functions in this module are to help implement …","","","","Transmits a frame through the <code>TxChannel</code> given a closure …","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","Checks if the <code>Frame</code> is empty.","Gets the length of the frame in bytes.","Instantiates a new <code>Frame</code>. See the struct documentation for …","","","","","","Sends a BogoFrame with the given <code>Frame</code>. This function …","Receives a BogoFrame with the timeout provided by the …","Receives a BogoFrame, blocking until the timer has elapsed …","","","An optionally bi-directionally encrypted and authenticated …","An optionally bi-directionally encrypted and authenticated …","The <code>RandomSource</code> used for encrypted UART channels.","","","","","","","","Changes the decryption key used for the UART RX channel to …","Changes the decryption key used for the UART RX channel to …","Changes the encryption key used for the UART TX channel to …","Changes the encryption key used for the UART TX channel to …","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates a new UART controller using the provided split …","Creates a new UART controller using the provided split …","","","","","","","","","","","","","","","","","","","","","","","","Creates a new UART controller using the provided split …","Creates a new UART controller using the provided split …","An <code>RxChannel</code> for receiving UART data. This channel is …","A <code>FramedTxChannel</code> for transmitting UART data. This channel …","The minimum size a framed UART message can be.","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates a new <code>FramedUartRxChannel</code> for UART0 tranmission …","Creates a new <code>FramedUartTxChannel</code> for UART0 tranmission …","Creates a new <code>FramedUartRxChannel</code> for UART1 tranmission …","Creates a new <code>FramedUartTxChannel</code> for UART1 tranmission …","","","","","","","","","","","","","","","","The number of bytes in a word.","The size of a byte. Deal with it.","The size of the car ID. 32 bits = 4 bytes.","The key used to facilitate encrypted communications from a …","The car ID.","","The EEPROM controller. Holds a mutable reference to the …","An enum for errors that can occur when reading from or …","A trait for all readable EEPROM fields.","This enum specifies the fields of the EEPROM that can be …","This enum specifies the fields of the EEPROM that can be …","The message to be printed when feature one is enabled.","The signed packaged feature for feature one.","The message to be printed when feature three is enabled.","The signed packaged feature for feature three.","The message to be printed when feature two is enabled.","The signed packaged feature for feature two.","The DER-encoded verifying key used to verify packaged …","An error for when the EEPROM controller fails to …","The key used to facilitate encrypted communications from a …","The size of unlock/feature messages.","The size of a signed packaged feature.","The size of the pairing PIN.","The max size of Postcard-encoded public keys.","The signature of the SEC1 public key-signing key used for …","The secret of the key used for the key-signing key in the …","Whether or not a key fob is paired with a car.","Whether or not the longer pairing cooldown is active.","The DER-encoded verifying key used for verifying a paired …","The DER-encoded verifying key used for verifying an …","The pairing PIN used to authenticate the pairing of an …","The size of encryption secrets. 256 bits = 32 bytes.","The size of Postcard-encoded signatures.","The key used as a starting point for the RNG seed hash.","An error for when the supplied buffer is too small to hold …","The message to be printed when the car is successfully …","The signature of the SEC1 public key-signing key used for …","The secret of the key used for the key-signing key in the …","The number of words in a block.","An error for when a write is performed without permission.","","","","","","","","","Checks that the field is within the EEPROM and that the …","","","","Dumps the contents of the EEPROM. Destination buffer …","The EEPROM peripheral.","Erases the entire EEPROM.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the bounds of the EEPROM field.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates a new EEPROM controller.","Power control.","Reads a slice of bytes from the EEPROM. Returns the number …","Sets the EEPROM block and offset to the given byte address.","","","","","","","","","","","","","","","","","Spins while the EEPROM is working.","Writes a slice of bytes to the EEPROM.","Verifies the signature of a <code>PackagedFeatureSigned</code> and …","The hibernation controller.","","","","Creates a timer from a duration using the hibernation …","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Creates a new hibernation controller.","","","","","The car ID type","A message sent either from a paired key fob to an unpaired …","A message containing the public key associated with the …","A message containing a signed packaged feature to enable a …","A message sent from the enable feature host tool to a …","The response sent from a paired key fob to the enable …","The feature number type","An acknowledgement to a request sent by a host tool. The …","A message sent from a car to the unlock host tool …","Key type (256-bits/32-bytes).","The number of features.","The type for a nonce/challenge.","A signed packaged feature associated with the car it’s …","A packaged feature, containing the Car ID and Feature …","The message to send to a paired key fob that initiated a …","A unique challenge sent from a paired key fob to an …","The response to send for a <code>PairingChallenge</code>. It contains …","The response to a challenge sent from a paired key fob …","A struct containing the pairing pin needed to initiate a …","A message sent from the pairing host tool to a paired key …","The response sent from an unpaired key fob to the pairing …","A message to send to an unpaired key fob to initiate a …","A message sent by a paired key fob to an unpaired key fob …","This enum represents all possible messages that can be …","This enum represents all possible messages that can be …","The message to send to a paired key fob that initiated an …","A unique challenge sent from a car to its paired key fob …","The response to send for an <code>UnlockChallenge</code>. It contains …","The response to a challenge sent from a car containing the …","The message containing the unlock secret, the feature …","The message to send to a car to signal the start of an …","A message sent from a paired key fob to its car to signal …","A signed public key.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The key to decrypt messages sent from the car that the key …","The ID of the car to be unlocked.","The ID of the car this feature is meant for.","The ID of the car to be unlocked.","The car ID.","The ID of the car the key fob will be paired to.","The unique 128-bit challenge to use to maintain freshness.","The unique challenge for the paired key fob to respond to …","The <code>Nonce</code> in the <code>UnlockChallenge</code> sent before this response.","The <code>Nonce</code> from the challenge given by the unpaired key fob.","","","","","","","","","","","","","","","","","","","The public key associated with the ephermeral secret …","The feature secrets for the enabled secrets on the car.","The number for the feature to enable on the linked car","The enabled features on the car.","A list of features that are enabled for this car.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The key to encrypt messages sent from the key fob that is …","The public key associated with the private key that signed …","The helper struct containing the Car ID and Feature Number.","The pairing PIN to use to pair future key fobs.","The public key in SEC1 format.","The signature authenticating <code>public_key</code> in byte format.","The <code>Nonce</code> from the original <code>PairingRequest</code> sent.","The <code>Nonce</code> sent in the original <code>PairingRequest</code> to the …","","","","","","","","","","","","","","","","","A signature for the car ID and feature number encoded in …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The unlock secret for the car.","Verifies and gets the public key.","","","","","","","","","","","","","","","","","","","<code>std::sync::Arc</code> but backed by a memory <code>Pool</code> rather than …","A priority queue implemented with a binary heap.","A fixed capacity double-ended queue.","A view into an entry in the map","A <code>heapless::IndexMap</code> using the default FNV hasher","A <code>heapless::IndexSet</code> using the default FNV hasher. A list …","A “history buffer”, similar to a write-only ring …","Fixed capacity <code>IndexMap</code>","Fixed capacity <code>IndexSet</code>.","A fixed capacity map / dictionary that performs lookups …","The entry corresponding to the key <code>K</code> exists in the map","An occupied entry which can be manipulated","An iterator on the underlying buffer ordered from oldest …","A fixed capacity <code>String</code>","The entry corresponding to the key <code>K</code> does not exist in the …","A view into an empty slot in the underlying map","A fixed capacity <code>Vec</code>","","Instantiates a pool of Arc pointers as a global singleton","","","","","","","Returns a raw pointer to the vector’s buffer, which may …","Returns a pair of mutable slices which contain, in order, …","Converts a <code>String</code> into a mutable string slice.","Returns a mutable reference to the contents of this <code>String</code>.","Returns a raw pointer to the vector’s buffer.","","","","","","Returns the array slice backing the buffer, without …","Extracts a slice containing the entire vector.","Returns a pair of slices which contain, in order, the …","Extracts a string slice containing the entire string.","Provides a reference to the back element, or None if the …","","Provides a mutable reference to the back element, or None …","A priority queue implemented with a binary heap.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the maximum number of elements the deque can hold.","Returns the capacity of the buffer, which is the length of …","Returns the number of elements the map can hold","Returns the number of elements the set can hold","Returns the number of elements that the map can hold","Returns the maximum number of elements the String can hold","Returns the maximum number of elements the vector can hold.","Returns the capacity of the binary heap.","Clears the deque, removing all values.","Clears the buffer, replacing every element with the …","Remove all key-value pairs in the map, while preserving …","Clears the set, removing all values.","Clears the map, removing all key-value pairs","Truncates this <code>String</code>, removing all contents.","Clears the vector, removing all values.","Drops all items from the binary heap.","Clears the buffer, replacing every element with the given …","","","","","","","","","","","Returns <code>true</code> if the set contains a value.","Returns true if the map contains a value for the specified …","Returns true if the map contains a value for the specified …","","","","","","","","","","","","","","","","","","","","","","","","","","Visits the values representing the difference, i.e. the …","","","","","","","","","","","Returns <code>true</code> if <code>needle</code> is a suffix of the Vec.","Returns an entry for the corresponding key","","","","","","","","","","","","","","","","","","","","","Extends the vec from an iterator.","Clones and writes all elements in a slice to the buffer.","Clones and appends all elements in a slice to the <code>Vec</code>.","","","Get the first key-value pair","Get the first value","Get the first key-value pair, with mutable access to the …","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Constructs a new vector with a fixed capacity of <code>N</code> and …","","Provides a reference to the front element, or None if the …","","Provides a mutable reference to the front element, or None …","","Gets a reference to the value associated with this entry","Returns a reference to the value corresponding to the key.","Returns a reference to the value corresponding to the key","Gets a mutable reference to the value associated with this …","Returns a mutable reference to the value corresponding to …","Returns a mutable reference to the value corresponding to …","","","","","","","","","","Overwrites the underlying map’s value with this entry’…","Inserts this entry into to underlying map, yields a …","Inserts a key-value pair into the map.","Adds a value to the set.","Inserts a key-value pair into the map.","Inserts an element at position <code>index</code> within the vector, …","Visits the values representing the intersection, i.e. the …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the contents of the vector as an array of length <code>M</code> …","Converts a <code>String</code> into a byte vector.","","","","","","","","","","","","","","Consumes this entry to yield to key associated with it","Consumes this entry and yields a reference to the …","Returns the underlying <code>Vec&lt;T,N&gt;</code>. Order is arbitrary and …","Returns <code>true</code> if <code>self</code> has no elements in common with <code>other</code>. …","Returns whether the deque is empty.","Returns true if the map contains no elements.","Returns <code>true</code> if the set contains no elements.","Returns true if the map contains no elements","Returns true if the vec is empty","Checks if the binary heap is empty.","Returns whether the deque is full (i.e. if …","Returns true if the vec is full","Returns <code>true</code> if the set is a subset of another, i.e. <code>other</code> …","Examples","Returns an iterator over the deque.","Return an iterator over the key-value pairs of the map, in …","Return an iterator over the values of the set, in their …","An iterator visiting all key-value pairs in arbitrary …","Returns an iterator visiting all values in the underlying …","Returns an iterator that allows modifying each value.","Return an iterator over the key-value pairs of the map, in …","An iterator visiting all key-value pairs in arbitrary …","Returns a mutable iterator visiting all values in the …","Gets a reference to the key that this entity corresponds to","Get the key associated with this entry","","","Return an iterator over the keys of the map, in their order","An iterator visiting all keys in arbitrary order","Get the last key-value pair","Get the last value","Get the last key-value pair, with mutable access to the …","Returns the number of elements currently in the deque.","Returns the current fill level of the buffer.","Return the number of key-value pairs in the map.","Returns the number of elements in the set.","Returns the number of elements in this map","Returns the length of the binary heap.","","","A fixed capacity Multiple-Producer Multiple-Consumer …","","","","Constructs a new, empty deque with a fixed capacity of <code>N</code>","Constructs a new history buffer.","Creates an empty <code>IndexMap</code>.","Creates an empty <code>IndexSet</code>","Creates an empty <code>LinearMap</code>","Constructs a new, empty <code>String</code> with a fixed capacity of <code>N</code> …","Constructs a new, empty vector with a fixed capacity of <code>N</code>","Creates an empty BinaryHeap as a $K-heap.","Constructs a new history buffer, where every element is …","","Returns an iterator for iterating over the buffer from …","","","Returns the <em>top</em> (greatest if max-heap, smallest if …","Returns a mutable reference to the greatest item in the …","","A heap-less, interrupt-safe, lock-free memory pool (*)","","Instantiates a pool as a global singleton","Removes the last character from the string buffer and …","Removes the last element from a vector and returns it, or …","Removes the <em>top</em> (greatest if max-heap, smallest if …","Removes the item from the back of the deque and returns …","Removes an item from the back of the deque and returns it, …","Removes the item from the front of the deque and returns …","Removes an item from the front of the deque and returns …","Removes the last element from a vector and returns it","Removes the <em>top</em> (greatest if max-heap, smallest if …","","","","Appends the given <code>char</code> to the end of this <code>String</code>.","Appends an <code>item</code> to the back of the collection","Pushes an item onto the binary heap.","Appends an <code>item</code> to the back of the deque","Appends an <code>item</code> to the back of the deque","Appends an <code>item</code> to the front of the deque","Appends an <code>item</code> to the front of the deque","Appends a given string slice onto the end of this <code>String</code>.","Appends an <code>item</code> to the back of the collection","Pushes an item onto the binary heap without first checking …","Returns a reference to the most recently written value.","Removes this entry from the map and yields its value","Same as <code>swap_remove</code>","Removes a value from the set. Returns <code>true</code> if the value …","Removes a key from the map, returning the value at the key …","Removes and returns the element at position <code>index</code> within …","Removes this entry from the map and yields its …","Resizes the Vec in-place so that len is equal to new_len.","Resizes the <code>Vec</code> in-place so that <code>len</code> is equal to <code>new_len</code>.","Retains only the elements specified by the predicate.","Retains only the elements specified by the predicate, …","","","","","","","Forces the length of the vector to <code>new_len</code>.","A fixed sorted priority linked list, similar to <code>BinaryHeap</code> …","Fixed capacity Single Producer Single Consumer (SPSC) queue","Returns <code>true</code> if <code>needle</code> is a prefix of the Vec.","Remove the key-value pair equivalent to <code>key</code> and return its …","Removes an element from the vector and returns it.","Removes an element from the vector and returns it.","Visits the values representing the symmetric difference, …","Shortens this <code>String</code> to the specified length.","","Shortens the vector, keeping the first <code>len</code> elements and …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Visits the values representing the union, i.e. all the …","Return an iterator over the values of the map, in their …","An iterator visiting all values in arbitrary order","Return an iterator over mutable references to the the …","An iterator visiting all values mutably in arbitrary order","","","","","","","","","","","","","","","Writes an element to the buffer, overwriting the oldest …","","","","","A priority queue implemented with a binary heap.","The binary heap kind: min-heap or max-heap","Max-heap","Min-heap","Structure wrapping a mutable reference to the greatest …","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Removes the peeked value from the heap and returns it.","","","","","","","","","","","","","","MPMC queue with a capacity for N elements N must be a …","MPMC queue with a capability for 16 elements.","MPMC queue with a capability for 2 elements.","MPMC queue with a capability for 32 elements.","MPMC queue with a capability for 4 elements.","MPMC queue with a capability for 64 elements.","MPMC queue with a capability for 8 elements.","","","","","Returns the item in the front of the queue, or <code>None</code> if the …","","Adds an <code>item</code> to the end of the queue","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Creates an empty queue","","","","","A memory block","Initialized type state","Unfortunate implementation detail required to use the …","A lock-free memory pool","Uninitialized type state","","","Claims a memory block from the pool","","","","","","","","","","","","","","","","","","","","","","","","Returns a memory block to the pool","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Increases the capacity of the pool","Increases the capacity of the pool","","Initializes this memory block","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates a new empty pool","","","","<code>Pool</code> as a global singleton","","","","","","","","","","","","","","","","","","","","","","","","A memory block that belongs to the global memory pool, <code>POOL</code>","The type of data that can be allocated on this pool","A global singleton memory pool","","Claims a memory block from the pool","Like <code>std::sync::Arc</code> but backed by a memory <code>Pool</code> rather …","","","","","","","","","","","","","","","","Forgets the contents of this memory block without running …","(DO NOT USE, SEE DEPRECATION) Freezes the contents of this …","Returns the argument unchanged.","Increases the capacity of the pool","Increases the capacity of the pool","","Initializes this memory block","","Calls <code>U::from(self)</code>.","","Instantiates a pool as a global singleton","","","","","","","<code>std::sync::Arc</code> but backed by a memory <code>Pool</code> rather than …","Unfortunate implementation detail required to use the …","The data behind the Arc pointer","Pool of Arc pointers","Instantiates a pool of Arc pointers as a global singleton","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","Comes from <code>SortedLinkedList::find_mut</code>.","Iterator for the linked list.","The linked list kind: min-list or max-list","Index for the <code>SortedLinkedList</code> with specific backing …","Index for the <code>SortedLinkedList</code> with specific backing …","Index for the <code>SortedLinkedList</code> with specific backing …","Marker for Max sorted <code>SortedLinkedList</code>.","Marker for Min sorted <code>SortedLinkedList</code>.","A node in the <code>SortedLinkedList</code>.","The linked list.","Trait for defining an index for the linked list, never …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Find an element in the list that can be changed and …","This will resort the element into the correct position in …","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Checks if the linked list is empty.","Checks if the linked list is full.","","Get an iterator over the sorted list.","","","","","Create a new linked list.","Create a new linked list.","Create a new linked list.","","","","","","Peek at the first element.","Pops the first element in the list.","This will pop the element from the list.","Pop an element from the list without checking so the list …","","Pushes an element to the linked list and sorts it into …","Pushes a value onto the list without checking if the list …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A queue “consumer”; it can dequeue items from the queue","An iterator over the items of a queue","A mutable iterator over the items of a queue","A queue “producer”; it can enqueue items into the queue","A statically allocated single producer single consumer …","","","","","","","","","","","","Returns the maximum number of elements the queue can hold","Returns the maximum number of elements the queue can hold","Returns the maximum number of elements the queue can hold","","","","Returns the item in the front of the queue, or <code>None</code> if the …","Returns the item in the front of the queue, or <code>None</code> if the …","Returns the item in the front of the queue, without …","Returns the item in the front of the queue, without …","","Adds an <code>item</code> to the end of the queue","Adds an <code>item</code> to the end of the queue, returns back the <code>item</code>…","Adds an <code>item</code> to the end of the queue, without checking if …","Adds an <code>item</code> to the end of the queue, without checking if …","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Returns <code>true</code> if the queue is empty","Returns <code>true</code> if the queue is full","Iterates from the front of the queue to the back","Returns an iterator that allows modifying each value","Returns the number of elements in the queue","Returns the number of elements in the queue","Returns the number of elements in the queue","","","Creates an empty queue with a fixed capacity of <code>N - 1</code>","","","","","Returns a reference to the item in the front of the queue …","Returns the item in the front of the queue without …","","","","","Returns if there are any items to dequeue. When this …","Returns if there is any space to enqueue a new item. When …","Splits a queue into producer and consumer endpoints","","","","","","","","","","","","","","","","","","","","","","","","This module contains an interface to gather entropy and …","Fills a slice with random bytes from the main CSPRNG.","Fills a slice with random bytes from the secondary CSPRNG.","Initializes the secondary and main CSPRNG. The …","The size of the hashed entropy. 256 bits = 32 bytes.","A hasher that concatenates entropy sources together and …","A trait for all entropy sources.","","Adds entropy from the entropy source to a hasher.","","","","The sources of entropy to hash.","Returns the argument unchanged.","Concatenates entropy sources together and hashes the …","Initializes the internal state of the entropy source. May …","Calls <code>U::from(self)</code>.","Initializes the entropy hasher, gathering entropy from all …","","","","","","","This entropy source gathers entropy from the LSBs of the …","Time to delay in milliseconds.","Amount to sample in bytes.","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","Number of bytes to gather for clock drift.","This entropy source gathers entropy from drift between …","Number of subseconds to count for clock drift.","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","This entropy source is a constant secret value.","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","The size of the uninitialized memory buffer.","","This entropy source gathers entropy from uninitialized …","","","","Returns the argument unchanged.","Gets the size of the uninitialized memory buffer from the …","","Copies uninitialized memory into the random_bytes buffer …","Calls <code>U::from(self)</code>.","This is the callback function passed into the …","","The copied uninitialized memory buffer.","","","","","","<code>std::sync::Arc</code> but backed by a memory <code>Pool</code> rather than …","Bits-per-second for UART communications.","","The size of the memory pool for the hibernation peripheral.","The memory pool for the HIB peripheral.","","The runtime struct.","All peripherals and core peripherals, but with the system …","The RX pin for UART 0.","The TX pin for UART 0.","The RX pin for UART 1.","The TX pin for UART 1.","","","Allocates a new <code>Arc</code> and writes <code>data</code> to it.","","","","","","","","","","","","","","","","","The EEPROM controller.","Fills a slice with random bytes from the main CSPRNG.","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","","","","Increases the capacity of the pool.","","The hibernation controller.","","","","","","Initializes the system clock and power control, and …","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Initializes the runtime.","","","","","","","","","","","","","","","","The SW1 button controller.","","","","","","","","","","","","","","","","","","The controller for UART0. See the documentation for …","","","The controller for UART1. See the documentation for …","","","","","","","","","","","","","","","","","","","","","","The timer struct. Used to count a specific amount of time …","","","This trait represents a timer that can be poll and reset. …","","","Gets the total duration of the timer.","","","","Returns the argument unchanged.","Gets the current time from the hibernation clock.","Gets the current time from the hibernation clock.","","Calls <code>U::from(self)</code>.","Initializes a timer that expires after a certain duration.","","Polls the timer to see if time is up, returning <code>true</code> if it …","","Resets the timer back to its original duration.","","Converts (seconds, subseconds) to subseconds.","","","",""],"i":[0,0,0,0,0,0,0,0,121,121,2,2,2,2,0,121,121,121,121,2,2,0,121,121,121,121,2,2,121,0,121,130,2,2,2,0,121,2,2,121,121,2,121,121,121,121,121,121,121,121,121,2,0,121,130,121,121,121,121,2,121,0,121,2,121,2,121,2,2,121,2,121,121,121,121,0,0,121,121,121,121,121,130,121,0,121,121,121,121,121,121,121,2,2,2,2,130,121,121,130,121,121,121,121,121,121,121,121,121,121,2,121,121,121,121,121,121,121,121,0,0,0,0,0,0,0,11,11,11,11,11,11,11,11,11,11,11,11,11,0,14,14,0,0,14,0,0,0,0,24,14,14,14,14,14,14,14,0,133,133,22,23,0,134,14,14,22,23,14,0,14,0,0,0,135,0,0,0,0,0,16,17,16,17,135,16,17,16,17,16,17,136,16,17,16,17,16,17,17,16,16,17,16,17,16,17,16,17,16,17,0,0,19,0,19,19,19,137,19,19,19,19,19,19,19,19,19,19,19,19,0,0,0,0,0,0,0,0,24,24,22,23,24,22,23,22,23,22,23,24,24,22,23,24,22,23,22,23,22,23,22,23,22,23,22,23,24,22,23,24,22,23,22,23,24,22,23,0,24,22,23,22,23,0,0,0,0,31,33,31,33,31,31,31,33,31,33,33,31,33,31,33,33,33,33,33,31,31,33,31,33,31,31,33,31,33,34,0,0,37,37,0,0,0,0,0,0,36,37,36,37,36,37,36,38,37,0,0,0,0,36,36,37,37,36,36,37,0,0,36,38,36,37,37,34,38,36,37,34,38,36,37,34,38,34,36,37,34,34,34,34,38,36,37,34,38,42,36,37,36,37,34,38,34,34,34,34,36,37,34,38,36,37,34,38,36,37,34,38,36,37,34,38,34,34,0,0,44,44,44,44,44,44,44,44,44,44,44,44,0,49,0,0,48,48,0,0,48,0,0,0,0,0,0,49,0,49,0,48,48,0,49,0,0,0,49,0,49,0,0,49,0,48,49,50,51,52,43,53,54,55,56,57,58,59,60,61,62,48,49,50,51,52,43,53,54,55,56,57,58,59,60,61,62,62,51,52,53,54,62,51,61,53,62,48,49,50,51,52,43,53,54,55,56,57,58,59,60,61,62,56,62,59,54,52,54,53,52,43,48,49,50,51,52,43,53,54,55,56,57,58,59,60,61,62,48,49,50,51,52,43,53,54,55,56,57,58,59,60,61,62,62,59,43,62,58,58,61,62,48,49,50,51,52,43,53,54,55,56,57,58,59,60,61,62,43,48,49,50,51,52,43,53,54,55,56,57,58,59,60,61,62,48,49,50,51,52,43,53,54,55,56,57,58,59,60,61,62,48,49,50,51,52,43,53,54,55,56,57,58,59,60,61,62,54,58,48,49,50,51,52,43,53,54,55,56,57,58,59,60,61,62,56,62,0,0,0,0,0,0,0,0,0,0,78,0,0,0,78,0,0,74,0,70,68,66,66,66,66,66,67,68,68,66,70,68,68,66,66,70,66,67,68,67,67,67,0,67,70,78,88,89,71,72,73,68,66,74,75,67,70,78,88,89,71,72,73,68,66,74,75,75,67,73,66,71,67,70,71,72,73,68,66,74,67,70,71,72,73,68,66,74,70,67,71,72,73,68,66,74,75,68,66,72,71,73,88,89,71,75,70,74,67,70,71,72,73,68,66,74,70,68,66,68,66,71,72,73,68,66,74,72,67,70,73,66,70,68,66,70,68,66,66,71,71,72,73,68,68,68,66,66,66,66,66,66,70,70,71,71,72,72,66,66,66,70,66,66,70,71,72,71,67,70,71,72,73,68,68,66,74,67,70,78,88,89,71,72,73,68,68,68,68,68,68,68,68,68,68,66,74,75,71,72,73,68,68,68,66,66,68,67,67,67,67,88,71,73,88,71,73,68,68,66,66,89,71,73,71,73,88,89,71,72,73,66,72,67,70,78,88,89,71,72,73,68,66,74,75,66,68,67,67,67,71,71,71,72,73,66,66,66,74,75,89,88,74,72,67,71,72,73,66,74,67,66,72,72,67,71,72,73,74,67,71,73,74,88,89,88,89,71,73,71,72,71,67,70,71,72,73,74,66,72,0,68,68,68,67,70,71,72,73,68,66,74,70,75,70,68,66,74,74,2,0,2,0,68,66,74,67,67,67,67,66,74,88,88,2,68,66,74,67,67,67,67,68,66,74,70,88,71,72,73,66,88,66,66,66,66,71,72,73,68,66,74,66,0,0,66,71,66,66,72,68,66,66,70,68,66,66,67,70,78,88,89,71,72,73,68,66,66,74,75,67,70,78,88,89,71,72,73,68,66,74,75,67,70,78,88,89,71,72,73,68,66,74,75,72,71,73,71,73,68,67,70,78,88,89,71,72,73,68,66,74,75,75,70,70,68,68,66,0,0,0,0,0,74,138,139,101,138,139,101,74,101,101,101,138,139,101,101,138,139,101,101,101,138,139,101,138,139,101,138,139,101,138,139,101,0,0,0,0,0,0,0,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,0,0,0,0,0,104,106,104,106,106,106,106,140,104,106,105,107,140,104,106,105,107,106,140,106,106,106,106,106,106,106,104,140,104,106,105,107,104,104,106,106,140,104,106,105,107,104,140,106,106,0,104,106,106,140,104,106,105,107,140,104,106,105,107,140,104,106,105,107,140,104,106,105,107,0,141,0,109,141,0,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,141,141,109,109,109,109,109,0,109,109,109,109,109,109,0,0,142,0,0,143,143,143,143,143,2,2,2,143,143,143,143,143,0,0,0,0,0,0,0,0,0,0,0,114,144,145,146,114,115,113,110,111,112,144,145,146,114,115,113,110,111,112,110,111,112,110,111,112,113,113,114,113,110,111,112,114,113,114,110,111,112,114,144,145,146,114,115,113,110,111,112,114,115,113,144,145,146,114,115,113,110,111,112,115,114,114,113,114,114,115,113,113,114,114,114,115,146,110,111,112,114,114,113,114,113,114,114,144,145,146,114,115,113,110,111,112,144,145,146,114,115,113,110,111,112,144,145,146,114,115,113,110,111,112,146,144,145,146,114,115,113,110,111,112,0,0,0,0,0,116,119,120,117,118,116,119,120,117,118,116,116,117,118,116,119,116,116,117,116,117,116,116,118,116,118,116,116,116,119,120,117,118,116,116,116,119,120,116,119,120,117,118,116,116,119,120,116,116,116,116,116,117,118,119,120,116,119,120,119,120,116,117,119,120,117,118,117,118,116,116,116,119,120,117,118,116,119,120,117,118,116,119,120,117,118,116,119,120,117,118,0,0,0,0,0,0,0,0,0,0,123,124,124,0,124,124,124,123,124,124,0,124,124,124,0,124,0,0,0,125,125,125,125,125,125,125,125,125,125,125,125,0,0,0,126,126,126,126,126,126,126,126,126,126,126,126,0,127,127,127,127,127,127,127,127,127,127,127,127,127,0,0,0,0,128,128,128,128,0,128,0,128,0,128,0,128,128,128,128,128,0,0,0,0,0,0,0,0,0,0,0,0,121,121,47,47,130,121,47,130,121,121,121,121,121,121,121,121,121,121,121,130,130,121,121,121,47,130,121,121,121,121,121,121,121,121,121,121,121,47,121,130,121,121,121,121,0,0,0,0,47,130,121,121,121,130,121,121,2,2,121,2,121,121,121,121,121,121,121,121,121,130,121,121,121,121,121,121,121,121,47,130,121,47,130,121,47,130,121,130,121,121,130,121,121,121,121,121,121,121,121,121,121,47,130,121,121,121,121,121,121,121,121,121,0,46,46,0,46,46,147,46,46,46,46,46,46,46,46,46,46,147,46,147,46,46,46,46,46,46],"f":[0,0,0,0,0,0,0,0,0,0,[[],1],[2],[[]],[[]],0,0,0,0,0,[2,2],[[2,2],3],0,0,0,0,0,[2],[2],0,0,0,0,[[]],[[]],[[2,2],4],0,0,[[2,5],[[7,[6]]]],[[2,5],[[7,[6]]]],0,0,[[]],0,0,0,0,0,0,0,0,0,[2],0,0,0,0,0,0,0,[[]],0,0,0,[[],[[7,[2]]]],0,[[2,2],[[8,[3]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],[[7,[1,9]]]],[[],7],[[],7],[[],10],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],0,[[]],[[]],[11],[11],[[]],[[]],[[12,13],11],[11,4],[[],7],[[],7],[[],10],[[]],0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[14,14],[[14,14],4],[[14,5],[[7,[6]]]],[[]],[[]],0,[[],[[7,[15,14]]]],[[],[[7,[15,14]]]],0,0,0,[[],[[7,[14]]]],[[],7],[[],7],0,0,[[],10],0,[[]],0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[16],[17],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[18,16],[18,17],0,[16,[[7,[15,14]]]],[16,[[7,[15,14]]]],[17,[[7,[14]]]],[[],7],[[],7],[[],7],[[],7],[[],10],[[],10],[[]],[[]],0,0,[19,[[7,[19,14]]]],0,[[]],[[]],[[],19],[20,[[7,[14]]]],0,[[]],[[]],[19],[19,4],[19,15],[[],19],0,[[],7],[[],7],[[],10],[[]],[[19,21,15],[[7,[14]]]],[[21,15],[[7,[15,14]]]],[[21,15],[[7,[15,14]]]],0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[22],[23],[22],[23],[[24,25]],[[]],[[]],[[]],[[]],[[]],[[]],[[26,27,28,28],22],[[26,27,28,28],23],[22,[[29,[15]]]],[23,[[29,[15]]]],[22,[[29,[15]]]],[23,[[29,[15]]]],0,0,[22,29],[23,29],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],0,0,[[],10],[[],10],[[],10],0,[[]],[[]],[[]],[[26,27],22],[[26,27],23],0,0,0,0,[[]],[[]],[[]],[[]],[[[31,[30]],20],29],[[[31,[32]],20],29],[[]],[[]],[[]],[[]],[27,[[33,[30]]]],[26,[[31,[30]]]],[27,[[33,[32]]]],[26,[[31,[32]]]],[[[33,[32]]],[[29,[15]]]],[[[33,[30]]],[[29,[15]]]],[[[33,[32]]],[[29,[15]]]],[[[33,[30]]],[[29,[15]]]],0,[[],[[7,[14]]]],[[],7],[[],7],[[],7],[[],7],0,[[],10],[[],10],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[34,35],15],[36,36],[37,37],[34],[34,[[7,[38]]]],0,[34],[[38,5],39],[[]],[[]],[[]],[[]],[[],35],[36,35],[37,35],[[]],[[]],[[]],[[]],[[40,41],[[7,[34,38]]]],0,[[34,42],[[7,[15,38]]]],[[34,15]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],10],[[],10],[[],10],[[],10],[[]],[[]],[[]],[[]],[34],[[34,37],[[7,[38]]]],[[34,43],4],0,[[]],[[]],[44,44],[[44,45],46],[[]],0,[[]],[[[2,[47]],41],44],[[],7],[[],7],[[],10],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,[[],[[7,[48]]]],[[],[[7,[49]]]],[[],[[7,[50]]]],[[],[[7,[51]]]],[[],[[7,[52]]]],[[],[[7,[43]]]],[[],[[7,[53]]]],[[],[[7,[54]]]],[[],[[7,[55]]]],[[],[[7,[56]]]],[[],[[7,[57]]]],[[],[[7,[58]]]],[[],[[7,[59]]]],[[],[[7,[60]]]],[[],[[7,[61]]]],[[],[[7,[62]]]],[56],[62],0,0,0,0,0,[[52,5],[[7,[6]]]],[[43,5],[[7,[6]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,[48,7],[49,7],[50,7],[51,7],[52,7],[43,7],[53,7],[54,7],[55,7],[56,7],[57,7],[58,7],[59,7],[60,7],[61,7],[62,7],0,[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],0,[[58,63],[[8,[[65,[64]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[56],[62],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],1],[[],1],[[],1],[66],[66,66],[[],1],[66],[67],[68,69],[68,66],[66],[70],[68],[68,69],[66,66],[66],[70],[66],[67],[68,69],[67,8],0,[67,8],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,[67,15],[70,15],[71,15],[72,15],[73,15],[68,15],[66,15],[74,15],[67],[70],[71],[72],[73],[68],[66],[74],[70],[67,67],[71,71],[72,72],[73,73],[68,68],[66,66],[74,74],[75,75],[[68,68],3],[[66,66],3],[72,4],[71,4],[73,4],0,0,0,0,0,0,[[],67],[[],70],[[],71],[[],72],[[],73],[[],68],[[],66],[[],74],[70],[68,69],[66],[68,69],[66],[[],[[7,[[71,[76]]]]]],[[],[[7,[[72,[76]]]]]],[[],[[7,[73]]]],[[],[[7,[68]]]],[[],[[7,[66]]]],[[],[[7,[74]]]],[[72,72],77],[67],[70],[73],[66],[[]],[[]],[[]],[[]],[[]],[[]],[66,4],[71,78],[[71,71],4],[[72,72],4],[[73,73],4],[[68,69],4],[[68,68],4],[[68,69],4],[66,4],[[66,66],4],[66,4],[66,4],[66,4],[66,4],[70],[70],[71],[71],[72],[72],[66],[66],[66],[70],[66,7],[[[66,[79]]],[[7,[80]]]],0,[71,8],[72,8],[71,8],[[67,5],[[7,[6]]]],[[70,5],[[7,[6]]]],[[71,5],[[7,[6]]]],[[72,5],[[7,[6]]]],[[73,5],[[7,[6]]]],[[68,5],[[7,[6]]]],[[68,5],[[7,[6]]]],[[66,5],[[7,[6]]]],[[74,5],[[7,[6]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[81,68],[82,68],[69,68],[83,68],[84,68],[[]],[85,68],[86,68],[79,68],[87,68],[[]],[[]],[[]],[[],71],[[],72],[[],73],[[],68],[[],68],[[],68],[[],66],[[],[[7,[66]]]],[69,[[7,[68]]]],[67,8],0,[67,8],0,[88],[71,8],[73,8],[88],[71,8],[73,8],[68],[68],[66],[66],0,[71],[73],[71],[73],[88],[89,7],[71,[[7,[8]]]],[72,[[7,[4]]]],[73,[[7,[8]]]],[[66,15],7],[[72,72],90],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[66,[[7,[66]]]],[68,[[66,[79]]]],[67],[67],[67],[71],[71],[71],[72],[73],[66],[66],[66],[74],[[]],[89],[88],[74,66],[[72,72],4],[67,4],[71,4],[72,4],[73,4],[66,4],[74,4],[67,4],[66,4],[[72,72],4],[[72,72],4],[67,91],[71,92],[72,93],[73,94],[74,95],[67,96],[71,97],[73,98],[74,99],[88],[89],0,0,[71,100],[73,100],[71,8],[72,8],[71,8],[67,15],[70,15],[71,15],[72,15],[73,15],[74,15],0,0,0,[[68,69],4],[[68,69],4],[[68,68],4],[[],67],[[],70],[[],[[71,[76]]]],[[],[[72,[76]]]],[[],73],[[],68],[[],66],[[],74],[[],70],[75,8],[70,75],[[68,68],[[8,[3]]]],[[66,66],[[8,[3]]]],[74,8],[74,[[8,[101]]]],0,0,0,0,[68,[[8,[102]]]],[66,8],[74,8],[67,8],[67],[67,8],[67],[66],[74],0,0,0,[[68,102],7],[66,7],[74,7],[67,7],[67],[67,7],[67],[[68,69],7],[66],[74],[70,8],[88],[71,8],[72,4],[73,8],[[66,15]],[88],[[66,15],7],[[66,15],7],[66],[66],[71,7],[72,7],[73,7],[68,7],[66,7],[74,7],[[66,15]],0,0,[66,4],[71,8],[[66,15]],[[66,15]],[[72,72],100],[[68,15]],[[[66,[79]],15]],[[66,15]],[[],[[7,[1,9]]]],[[],[[7,[1,9]]]],[[],[[7,[1,9]]]],[[],[[7,[1,9]]]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],[[7,[66]]]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[72,72],100],[71,100],[73,100],[71,100],[73,100],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[70],0,[[68,102],[[7,[6]]]],[[68,69],[[7,[6]]]],[[[66,[79]],69],[[7,[6]]]],0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],0,[101],[101],[101],[[]],[[]],[[]],0,[[]],[[]],[[]],[101],0,[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],10],[[],10],[[],10],[[]],[[]],[[]],0,0,0,0,0,0,0,[[]],[[]],0,[[],103],[103,8],0,[103,7],0,[[]],[[]],[[],103],[[],7],[[],7],[[],10],[[]],0,0,0,0,0,0,0,[104,[[8,[[106,[105]]]]]],[[],1],[[[106,[107]]]],[[],1],[[[106,[107]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[106,[107]],106],3],0,[[[106,[107]]]],[[[106,[107]]]],[[]],[[]],[[[106,[107]],106],4],[[[106,[107]],5],[[7,[6]]]],[[[106,[107]],5],[[7,[6]]]],[[104,106]],[[]],[[]],[[]],[[]],[[]],[104,15],[[104,108],15],[[[106,[107]]]],[[[106,[105]]],[[106,[107]]]],[[]],[[]],[[]],[[]],[[]],[[],104],0,0,[[[106,[107]],106],[[8,[3]]]],0,0,[[],[[7,[1,9]]]],[[],[[7,[1,9]]]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],10],[[],10],[[],10],[[],10],[[],10],[[]],[[]],[[]],[[]],[[]],0,0,0,0,[[],[[8,[[109,[105]]]]]],0,[[],1],[[[109,[107]]]],[[],1],[[[109,[107]]]],[[]],[[]],[[[109,[107]],109],3],[[[109,[107]]]],[[[109,[107]]]],[109],[[]],[[]],[[[109,[107]],109],4],[[[109,[107]],5],[[7,[6]]]],[[[109,[107]],5],[[7,[6]]]],[[[109,[107]]],[[109,[105]]]],[[[109,[105]]],[[109,[107]]]],[[]],[[],15],[108,15],[[[109,[107]]]],[[[109,[105]]],[[109,[107]]]],0,[[]],[[[109,[107]],109],[[8,[3]]]],0,[[],[[7,[1,9]]]],[[],[[7,[1,9]]]],[[],7],[[],7],[[],10],[[]],0,0,0,0,0,[[]],[[]],0,[[]],[[]],0,0,0,0,[[],7],[[],7],[[],10],[[]],0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[110,110],[111,111],[112,112],[[110,110],3],[[111,111],3],[[112,112],3],[113],[113],[114],[113],[[110,110],4],[[111,111],4],[[112,112],4],[114,[[8,[113]]]],[113],[[114,5],[[7,[6]]]],[[110,5],[[7,[6]]]],[[111,5],[[7,[6]]]],[[112,5],[[7,[6]]]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[114,4],[114,4],0,[114,115],0,0,0,0,[[],[[114,[111]]]],[[],[[114,[110]]]],[[],[[114,[112]]]],[115,8],0,[[110,110],[[8,[3]]]],[[111,111],[[8,[3]]]],[[112,112],[[8,[3]]]],[114,8],[114,7],[113],[114],0,[114,7],[114],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[116,15],[117,15],[118,15],[116,116],[119,119],[[],116],[116,8],[117,8],[116],[117],[116],[116,7],[118,7],[116],[118],[[116,116],4],[[116,5],[[7,[6]]]],[[]],[[]],[[]],[[]],[[]],[116],[116],0,0,0,[[]],[[]],[[]],[[]],[[]],[116],[116],[[]],[[]],[116,4],[116,4],[116,119],[116,120],[116,15],[117,15],[118,15],0,0,[[],116],[119,8],[120,8],[119,8],[120,8],[116,8],[117,8],0,0,0,0,[117,4],[118,4],[116],0,[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],10],[[],10],[[],10],[[],10],[[],10],[[]],[[]],[[]],[[]],[[]],0,0,0,[[]],[[]],[121],0,0,0,0,[122],[[]],[[]],0,0,[[]],[[[124,[123]]]],[121],[[]],[121,[[124,[123]]]],0,[[],7],[[],7],[[],10],0,[[]],0,0,0,[[[125,[123]],122]],[[]],[[]],[[]],[121,[[125,[123]]]],[[]],0,0,[[],7],[[],7],[[],10],[[]],0,0,0,[[[126,[123]],122]],[[]],[[]],0,[[]],[121,[[126,[123]]]],[[]],0,[[],7],[[],7],[[],10],[[]],0,[[[127,[123]],122]],[[]],[[]],[[[127,[123]]]],[[]],[121,[[127,[123]]]],[[]],0,0,[[],7],[[],7],[[],10],[[]],0,0,0,0,[[[128,[123]],122]],[[]],[[]],[[]],[[],15],[121,[[128,[123]]]],0,[[]],[108],0,0,0,[[],7],[[],7],[[],10],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[129,[[7,[[2,[47]],129]]]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,[130],0,0,0,[[]],[[]],[[],121],[[]],0,0,0,0,0,0,0,0,0,[[],15],0,0,0,0,0,0,0,[131],[[30,132,41]],[[32,132,41]],[[]],[[]],[[]],0,0,[[121,28,28],130],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],10],[[],10],[[],10],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[],45],[46,45],0,0,[[]],[46],[2],0,[[]],[[2,45],46],[[2,45],46],[[],4],[46,4],[[]],[46],[[],85],[[],7],[[],7],[[],10],[[]]],"p":[[3,"BitSlice"],[3,"Arc"],[4,"Ordering"],[15,"bool"],[3,"Formatter"],[3,"Error"],[4,"Result"],[4,"Option"],[4,"BitSpanError"],[3,"TypeId"],[3,"Sw1ButtonController"],[3,"PF4"],[3,"NVIC"],[4,"CommunicationError"],[15,"usize"],[3,"XChacha20Poly1305RxChannel"],[3,"XChacha20Poly1305TxChannel"],[3,"GenericArray"],[3,"Frame"],[8,"FnOnce"],[8,"FnMut"],[3,"Uart0Controller"],[3,"Uart1Controller"],[3,"UartRandomSource"],[8,"AsMut"],[3,"Tx"],[3,"Rx"],[6,"Key"],[6,"Result"],[3,"UART0"],[3,"FramedUartTxChannel"],[3,"UART1"],[3,"FramedUartRxChannel"],[3,"EepromController"],[3,"EepromFieldBounds"],[4,"EepromReadOnlyField"],[4,"EepromReadWriteField"],[4,"EepromError"],[6,"Result"],[3,"EEPROM"],[3,"PowerControl"],[8,"EepromReadField"],[3,"PackagedFeatureSigned"],[3,"HibController"],[3,"Duration"],[3,"HibTimer"],[3,"HibPool"],[4,"Uart0Message"],[4,"Uart1Message"],[3,"UnlockRequest"],[3,"UnlockChallenge"],[3,"PackagedFeatureUnsigned"],[3,"UnlockChallengeResponse"],[3,"UnlockMessage"],[3,"EnableFeatureMessage"],[3,"PairingPin"],[3,"HostToolAck"],[3,"VerifiedPublicKey"],[3,"DiffieHellmanMessage"],[3,"PairingRequest"],[3,"PairingChallenge"],[3,"PairingChallengeResponse"],[3,"VerifyingKey"],[3,"Secp256k1"],[3,"PublicKey"],[3,"Vec"],[3,"Deque"],[3,"String"],[15,"str"],[3,"HistoryBuffer"],[3,"IndexMap"],[3,"IndexSet"],[3,"LinearMap"],[3,"BinaryHeap"],[3,"OldestOrdered"],[3,"BuildHasherDefault"],[3,"Difference"],[4,"Entry"],[15,"u8"],[3,"Error"],[15,"u32"],[15,"u16"],[15,"i32"],[15,"i16"],[15,"u64"],[15,"i8"],[15,"i64"],[3,"OccupiedEntry"],[3,"VacantEntry"],[3,"Intersection"],[3,"Iter"],[3,"Iter"],[3,"Iter"],[3,"Iter"],[3,"Iter"],[3,"IterMut"],[3,"IterMut"],[3,"IterMut"],[3,"IterMut"],[8,"Iterator"],[3,"PeekMut"],[15,"char"],[3,"MpMcQueue"],[3,"Pool"],[4,"Uninit"],[3,"Box"],[4,"Init"],[19,"MaybeUninit"],[3,"Box"],[3,"LinkedIndexU8"],[3,"LinkedIndexU16"],[3,"LinkedIndexUsize"],[3,"FindMut"],[3,"SortedLinkedList"],[3,"Iter"],[3,"Queue"],[3,"Consumer"],[3,"Producer"],[3,"Iter"],[3,"IterMut"],[3,"RuntimePeripherals"],[6,"Sha3_256"],[8,"EntropySource"],[3,"EntropyHasher"],[3,"Adc"],[3,"ClockDrift"],[3,"Secret"],[3,"UninitMemory"],[3,"HIB"],[3,"Runtime"],[3,"Sysctl"],[3,"Clocks"],[8,"RxChannel"],[8,"TxChannel"],[8,"KeyedChannel"],[8,"RandomSource"],[8,"FramedTxChannel"],[4,"Min"],[4,"Max"],[3,"Node"],[8,"Pool"],[8,"Pool"],[3,"ArcInner"],[3,"Min"],[3,"Max"],[3,"Node"],[8,"Timer"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
