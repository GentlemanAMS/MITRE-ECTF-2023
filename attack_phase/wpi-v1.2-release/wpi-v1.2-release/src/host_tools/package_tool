#!/usr/bin/python3 -u

# @file package_tool
# @author Frederich Stine
# @brief host tool for packaging a feature for a fob
# @date 2023
#
# This source file is part of an example system for MITRE's 2023 Embedded
# CTF (eCTF). This code is being provided only for educational purposes for the
# 2023 MITRE eCTF competition, and may not meet MITRE standards for quality.
# Use this code at your own risk!
#
# @copyright Copyright (c) 2023 The MITRE Corporation

import argparse
import crypto
import struct

from Crypto.Random import get_random_bytes
from nacl.signing import SigningKey

# @brief Function to create a new feature package
# @param package_name, name of the file to output package data to
# @param car_id, the id of the car the feature is being packaged for
# @param feature_number, the feature number being packaged
def package(package_name, car_id: int, feature_number: int):
    package_bytes: bytes = struct.pack('<IB', car_id, feature_number)
    package_bytes += get_random_bytes(16 - len(package_bytes))

    secrets = crypto.load_secrets("/secrets/secrets.json")
    car_secrets = secrets.get(f'car_{car_id}')

    if car_secrets is None:
        raise RuntimeError("No secrets found for car %d" % car_id)
    
    signing_key = SigningKey(bytes.fromhex(car_secrets['manu_signing_key']))

    signed_package = signing_key.sign(package_bytes)

    signed_package_bytes = signed_package.message + signed_package.signature
    
    # Write data out to package file
    # /package_dir/ is the mounted location inside the container - should not change
    with open(f"/package_dir/{package_name}", "wb") as fhandle:
        nonce = crypto.gen_random_nonce(car_id, feature_number)
        fhandle.write(nonce)
        fhandle.write(crypto.pack_and_encrypt(crypto.TYPE_PACKAGE, signed_package_bytes, bytes.fromhex(car_secrets['key']), nonce))


# @brief Main function
#
# Main function handles parsing arguments and passing them to program
# function.
def main():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "--package-name", help="Name of the package file", type=str, required=True,
    )
    parser.add_argument(
        "--car-id", help="Car ID", type=int, required=True,
    )
    parser.add_argument(
        "--feature-number",
        help="Number of the feature to be packaged",
        type=int,
        required=True,
    )

    args = parser.parse_args()

    package(args.package_name, args.car_id, args.feature_number)


if __name__ == "__main__":
    main()
