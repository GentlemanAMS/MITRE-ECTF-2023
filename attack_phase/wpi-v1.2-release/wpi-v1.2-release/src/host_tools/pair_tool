#!/usr/bin/python3 -u

# @file pair_tool
# @author Frederich Stine
# @brief host tool for pairing a new key fob
# @date 2023
#
# This source file is part of an example system for MITRE's 2023 Embedded
# CTF (eCTF). This code is being provided only for educational purposes for the
# 2023 MITRE eCTF competition, and may not meet MITRE standards for quality.
# Use this code at your own risk!
#
# @copyright Copyright (c) 2023 The MITRE Corporation

import socket
import argparse
import util
import struct

from errors import translate_error

UNPAIRED_EARLY_ERRORS = [0x4000, 0x4003]

# @brief Function to send commands to pair
# a new fob.
# @param unpairmed_fob_bridge, bridged serial connection to unpairmed fob
# @param pairmed_fob_bridge, bridged serial connection to pairmed fob
# @param pair_pin, pin used to pair a new fob
def pair(unpaired_fob_bridge: int, paired_fob_bridge: int, pair_pin: str):

    # Connect to both sockets for serial
    unpaired_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    unpaired_sock.connect(("ectf-net", int(unpaired_fob_bridge)))

    paired_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    paired_sock.connect(("ectf-net", int(paired_fob_bridge)))

    # Send pair commands to both fobs
    util.send(unpaired_sock, b"xP")

    # Send pin to both fobs.
    util.send(unpaired_sock, pair_pin.encode())

    # Set timeout for if pairing fails
    unpaired_sock.settimeout(5)
    paired_sock.settimeout(5)

    # Try to receive data - if failed, pairing failed
    try:
        unpaired_status_code, = struct.unpack('<I', util.recv(unpaired_sock, 4))
        if unpaired_status_code == 0:
            print("Pair Success")
        else:
            if unpaired_status_code in UNPAIRED_EARLY_ERRORS:
                raise RuntimeError("Unpaired fob returned error: %s" % (translate_error(unpaired_status_code)))
            paired_status_code, = struct.unpack('<I', util.recv(paired_sock, 4))
            raise RuntimeError("Unpaired and paired fobs returned errors: %s / %s" % 
                               (translate_error(unpaired_status_code), translate_error(paired_status_code)))

    except socket.timeout:
        raise RuntimeError("Failed to pair fob (timeout)")

    return 0


# @brief Main function
#
# Main function handles parsing arguments and passing them to pair
# function.
def main():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "--unpaired-fob-bridge",
        help="Bridge for the unpaired fob",
        type=int,
        required=True,
    )
    parser.add_argument(
        "--paired-fob-bridge",
        help="Bridge for the paired fob",
        type=int,
        required=True,
    )
    parser.add_argument(
        "--pair-pin", help="Program PIN", type=str, required=True,
    )

    args = parser.parse_args()

    pair(args.unpaired_fob_bridge, args.paired_fob_bridge, args.pair_pin)


if __name__ == "__main__":
    main()
