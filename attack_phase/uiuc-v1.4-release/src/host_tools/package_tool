#!/usr/bin/env python3

# @file package_tool
# @author Frederich Stine
# @brief host tool for packaging a feature for a fob
# @date 2023
#
# This source file is part of an example system for MITRE's 2023 Embedded
# CTF (eCTF). This code is being provided only for educational purposes for the
# 2023 MITRE eCTF competition, and may not meet MITRE standards for quality.
# Use this code at your own risk!
#
# @copyright Copyright (c) 2023 The MITRE Corporation

import argparse
import os
from fastecdsa import ecdsa, curve

secrets_dir = "/secrets"
# /package_dir/ is the mounted location inside the container - should not change
package_dir = "/package_dir"

# @brief Function to create a new feature package
# @param package_name, name of the file to output package data to
# @param car_id, the id of the car the feature is being packaged for
# @param feature_number, the feature number being packaged
def package(package_name, car_id, feature_number):

    # Manufacturer deployment secret
    man_sec = open(os.path.join(secrets_dir, "man_sec"), "rb").read()

    # Pad car ID to 4 bytes
    car_id_b = int(car_id).to_bytes(4, "big")

    # Pad feature number to 4 bytes
    feat_b = feature_number.to_bytes(4, "big")

    # Create package
    message = car_id_b + feat_b

    # Sign package
    feat_sig_r, feat_sig_s = ecdsa.sign(message, int.from_bytes(man_sec, "big"), curve.P256)
    feat_sig = feat_sig_r.to_bytes(32, "big") + feat_sig_s.to_bytes(32, "big")

    package_message_bytes = message + feat_sig

    # Write data out to package file
    with open(os.path.join(package_dir, package_name), "wb") as fhandle:
        fhandle.write(package_message_bytes)

    print("Feature packaged")


# @brief Main function
#
# Main function handles parsing arguments and passing them to program
# function.
def main():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "--package-name", help="Name of the package file", type=str, required=True,
    )
    parser.add_argument(
        "--car-id", help="Car ID", type=str, required=True,
    )
    parser.add_argument(
        "--feature-number",
        help="Number of the feature to be packaged",
        type=int,
        required=True,
    )

    args = parser.parse_args()

    package(args.package_name, args.car_id, args.feature_number)


if __name__ == "__main__":
    main()
