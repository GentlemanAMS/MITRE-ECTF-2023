#!/usr/bin/python3 -u

# @file package_tool
# @author Purdue eCTF Team
# @brief host tool for creating a feature package
# @date 2023
#
# This file contains the host tool for creating a feature package
#
# @copyright Copyright (c) 2023 Purdue eCTF Team

import argparse
import json

# @brief Function to create a new feature package
# @param package_name, name of the file to output package data to
# @param car_id, the id of the car the feature is being packaged for
# @param feature_number, the feature number being packaged


def package(package_name, car_id, feature_number):

    # Pad id length to 8 bytes
    car_id_len = len(car_id)
    car_id_pad = (8 - car_id_len) * "\0"

    # Read Package Password from secret file
    with open(f"/secrets/{car_id}/eeprom.json", "r") as f:
        car_eeprom_data = json.load(f)

    feature_pwd = car_eeprom_data[f"FEATURE_KEY_{feature_number}"]['value']

    # Create package to match defined structure on fob
    package_message_bytes = (
        str.encode(car_id + car_id_pad)  # 8 byte
        + feature_number.to_bytes(1, "little")  # 1 byte
        + bytes.fromhex(feature_pwd)  # 16 bytes
    )

    # Write data out to package file
    # /package_dir/ is the mounted location inside the container - should not change
    with open(f"/package_dir/{package_name}", "wb") as fhandle:
        fhandle.write(package_message_bytes)

    print("Feature packaged")


# @brief Main function
#
# Main function handles parsing arguments and passing them to program
# function.
def main():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "--package-name", help="Name of the package file", type=str, required=True,
    )
    parser.add_argument(
        "--car-id", help="Car ID", type=str, required=True,
    )
    parser.add_argument(
        "--feature-number",
        help="Number of the feature to be packaged",
        type=int,
        required=True,
    )

    args = parser.parse_args()

    package(args.package_name, args.car_id, args.feature_number)


if __name__ == "__main__":
    main()
