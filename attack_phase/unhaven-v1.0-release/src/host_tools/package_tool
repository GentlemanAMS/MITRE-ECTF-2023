#!/usr/bin/python3 -u

# @file package_tool
# @author Frederich Stine
# @brief host tool for packaging a feature for a fob
# @date 2023
#
# This source file is part of an example system for MITRE's 2023 Embedded
# CTF (eCTF). This code is being provided only for educational purposes for the
# 2023 MITRE eCTF competition, and may not meet MITRE standards for quality.
# Use this code at your own risk!
#
# @copyright Copyright (c) 2023 The MITRE Corporation

import argparse
import json
import struct
import secrets
from Crypto.Cipher import AES

SECRETS_JSON_PATH = "/secrets/secrets.json"

# @brief Function to create a new feature package
# @param package_name, name of the file to output package data to
# @param car_id, the id of the car the feature is being packaged for
# @param feature_number, the feature number being packaged
# @param package_dir, The feature package directory
def package(package_name, car_id, feature_number, package_dir):
    with open(SECRETS_JSON_PATH, "r") as fhandle:
        secrets_json = json.load(fhandle)
    # This is the key we encrypt out stuff with
    feature_encryption_key = bytearray(secrets_json["feature_unlock_key"])
    feature_encryption_key_iv = bytearray(secrets_json["feature_unlock_key_iv"])
    car_secret_bytes = bytearray(secrets_json[str(car_id)+"_secret"])
    aes_cipher = AES.new(feature_encryption_key, AES.MODE_CBC, iv=feature_encryption_key_iv)

    to_encrypt = bytearray(secrets.token_bytes(15))
    to_encrypt += car_secret_bytes

    feature_number -= 1     # Made the feature number (given as 1->3) to 0->2
    if feature_number < 0 or feature_number >= 3:
        print("Invalid feature number")
        return
    to_encrypt.extend(struct.pack("B", feature_number))

    ciphertext = aes_cipher.encrypt(to_encrypt)

    # Write data out to package file
    # /package_dir/ is the mounted location inside the container - should not change
    with open(f"{package_dir}/{package_name}", "wb") as fhandle:
        fhandle.write(ciphertext)

    print("Feature packaged")


# @brief Main function
#
# Main function handles parsing arguments and passing them to program
# function.
def main():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "--package-name", help="Name of the package file", type=str, required=True,
    )
    parser.add_argument(
        "--car-id", help="Car ID", type=str, required=True,
    )
    parser.add_argument(
        "--feature-number",
        help="Number of the feature to be packaged",
        type=int,
        required=True,
    )
    parser.add_argument(
        "--package-dir",
        help="Allows the file to pull the secrets from the local directory",
        type=str,
        default="/package_dir",
    )

    args = parser.parse_args()

    package(args.package_name, args.car_id, args.feature_number, args.package_dir)


if __name__ == "__main__":
    main()
