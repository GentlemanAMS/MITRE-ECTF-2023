#!/usr/bin/python3 -u

# @file package_tool
# @author Frederich Stine
# @brief host tool for packaging a feature for a fob
# @date 2023
#
# This source file is part of an example system for MITRE's 2023 Embedded
# CTF (eCTF). This code is being provided only for educational purposes for the
# 2023 MITRE eCTF competition, and may not meet MITRE standards for quality.
# Use this code at your own risk!
#
# @copyright Copyright (c) 2023 The MITRE Corporation

import argparse
import json

from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes

JSON_FEATURE_KEY = "SECRET"


# @brief Function to create a new feature package
# @param package_name, name of the file to output package data to
# @param car_id, the id of the car the feature is being packaged for
# @param feature_number, the feature number being packaged
def package(package_name, car_id, feature_number, feature_key):

    car_id_len = len(car_id)
    car_id_pad = (8 - car_id_len) * "\0"
    final_feature_msg = str.encode(car_id + car_id_pad)

    # Compute unencrypted feature message
    digest = hashes.Hash(hashes.SHA256())
    feature_num_bytes = feature_number.to_bytes(1, "big")
    digest.update(feature_num_bytes)
    raw_feature_msg = digest.finalize()[:15] + feature_num_bytes

    # Encrypt feature message with car-specific key
    cipher = Cipher(algorithms.AES(feature_key), modes.ECB())
    encryptor = cipher.encryptor()
    final_feature_msg += encryptor.update(raw_feature_msg)
    final_feature_msg += encryptor.finalize()

    # Write data out to package file
    # /package_dir/ is the mounted location inside the container - should not change
    with open(f"/package_dir/{package_name}", "wb") as fhandle:
        fhandle.write(final_feature_msg)

    print("Feature packaged")


# @brief Main function
#
# Main function handles parsing arguments and passing them to program
# function.
def main():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "--package-name", help="Name of the package file", type=str, required=True,
    )
    parser.add_argument(
        "--car-id", help="Car ID", type=str, required=True,
    )
    parser.add_argument(
        "--feature-number",
        help="Number of the feature to be packaged",
        type=int,
        required=True,
    )

    args = parser.parse_args()

    try:
        with open("/secrets/car_secrets.json") as secrets_fh:
            secrets = json.load(secrets_fh)
    except FileNotFoundError:
        parser.error("Secrets file not found, has a car been built in this deployment?")

    try:
        car_secrets = secrets[str(args.car_id)]
    except KeyError:
        parser.error(f"Car not found, has a car with ID {args.car_id} been built?")
    try:
        feature_key = car_secrets[JSON_FEATURE_KEY]
    except (KeyError, TypeError):
        parser.error("Car secret data not valid, were the secrets generated using an old version?")
    
    feature_key = feature_key.to_bytes(16, "big")

    package(args.package_name, args.car_id, args.feature_number, feature_key)


if __name__ == "__main__":
    main()
